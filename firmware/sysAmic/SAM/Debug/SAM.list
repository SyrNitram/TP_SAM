
SAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002798  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002858  08002858  00012858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800288c  0800288c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800288c  0800288c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800288c  0800288c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800288c  0800288c  0001288c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002890  08002890  00012890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000010  080028a4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  080028a4  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a856  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f1e  00000000  00000000  0002a88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  0002c7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  0002d508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000140d9  00000000  00000000  0002e158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfb2  00000000  00000000  00042231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074932  00000000  00000000  0004e1e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c2b15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f1c  00000000  00000000  000c2b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002840 	.word	0x08002840

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08002840 	.word	0x08002840

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2201      	movs	r2, #1
 800022e:	431a      	orrs	r2, r3
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	601a      	str	r2, [r3, #0]
}
 8000234:	46c0      	nop			; (mov r8, r8)
 8000236:	46bd      	mov	sp, r7
 8000238:	b002      	add	sp, #8
 800023a:	bd80      	pop	{r7, pc}

0800023c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	6a1a      	ldr	r2, [r3, #32]
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	431a      	orrs	r2, r3
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	621a      	str	r2, [r3, #32]
}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	46bd      	mov	sp, r7
 8000256:	b002      	add	sp, #8
 8000258:	bd80      	pop	{r7, pc}

0800025a <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800025a:	b580      	push	{r7, lr}
 800025c:	b082      	sub	sp, #8
 800025e:	af00      	add	r7, sp, #0
 8000260:	6078      	str	r0, [r7, #4]
 8000262:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	683a      	ldr	r2, [r7, #0]
 8000268:	635a      	str	r2, [r3, #52]	; 0x34
}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	b002      	add	sp, #8
 8000270:	bd80      	pop	{r7, pc}

08000272 <LedStart>:

#include "Led.h"


// Démarre le timer
void LedStart(void){
 8000272:	b580      	push	{r7, lr}
 8000274:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM2);
 8000276:	2380      	movs	r3, #128	; 0x80
 8000278:	05db      	lsls	r3, r3, #23
 800027a:	0018      	movs	r0, r3
 800027c:	f7ff ffd0 	bl	8000220 <LL_TIM_EnableCounter>
	LL_TIM_OC_SetCompareCH1(TIM2, 150);
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	05db      	lsls	r3, r3, #23
 8000284:	2196      	movs	r1, #150	; 0x96
 8000286:	0018      	movs	r0, r3
 8000288:	f7ff ffe7 	bl	800025a <LL_TIM_OC_SetCompareCH1>
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	05db      	lsls	r3, r3, #23
 8000290:	2101      	movs	r1, #1
 8000292:	0018      	movs	r0, r3
 8000294:	f7ff ffd2 	bl	800023c <LL_TIM_CC_EnableChannel>
}
 8000298:	46c0      	nop			; (mov r8, r8)
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}

0800029e <LedSetValue>:

// Configure le rapport cyclique de la PWM entre 0 et 255
void LedSetValue(uint8_t val){
 800029e:	b580      	push	{r7, lr}
 80002a0:	b082      	sub	sp, #8
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	0002      	movs	r2, r0
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	701a      	strb	r2, [r3, #0]
	  LL_TIM_OC_SetCompareCH1(TIM2, val);
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	781a      	ldrb	r2, [r3, #0]
 80002ae:	2380      	movs	r3, #128	; 0x80
 80002b0:	05db      	lsls	r3, r3, #23
 80002b2:	0011      	movs	r1, r2
 80002b4:	0018      	movs	r0, r3
 80002b6:	f7ff ffd0 	bl	800025a <LL_TIM_OC_SetCompareCH1>
}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	46bd      	mov	sp, r7
 80002be:	b002      	add	sp, #8
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <LedPulse>:

// À chaque appel, cette fonction incrémente la luminosité de la LED
// Arrivé à la valeur maximale, chaque appel décrémente la LED
void LedPulse(void){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	static uint8_t dc = 20;
	static uint8_t up = 1;

	dc = up? dc+1: dc-1;
 80002c8:	4b12      	ldr	r3, [pc, #72]	; (8000314 <LedPulse+0x50>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d004      	beq.n	80002da <LedPulse+0x16>
 80002d0:	4b11      	ldr	r3, [pc, #68]	; (8000318 <LedPulse+0x54>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	3301      	adds	r3, #1
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	e003      	b.n	80002e2 <LedPulse+0x1e>
 80002da:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <LedPulse+0x54>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	3b01      	subs	r3, #1
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	4a0d      	ldr	r2, [pc, #52]	; (8000318 <LedPulse+0x54>)
 80002e4:	7013      	strb	r3, [r2, #0]

	if(dc >= 255) up = 0;
 80002e6:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <LedPulse+0x54>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2bff      	cmp	r3, #255	; 0xff
 80002ec:	d103      	bne.n	80002f6 <LedPulse+0x32>
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <LedPulse+0x50>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	701a      	strb	r2, [r3, #0]
 80002f4:	e006      	b.n	8000304 <LedPulse+0x40>
		else if( dc <=0) up = 1;
 80002f6:	4b08      	ldr	r3, [pc, #32]	; (8000318 <LedPulse+0x54>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d102      	bne.n	8000304 <LedPulse+0x40>
 80002fe:	4b05      	ldr	r3, [pc, #20]	; (8000314 <LedPulse+0x50>)
 8000300:	2201      	movs	r2, #1
 8000302:	701a      	strb	r2, [r3, #0]

	LedSetValue(dc);
 8000304:	4b04      	ldr	r3, [pc, #16]	; (8000318 <LedPulse+0x54>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	0018      	movs	r0, r3
 800030a:	f7ff ffc8 	bl	800029e <LedSetValue>
}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000000 	.word	0x20000000
 8000318:	20000001 	.word	0x20000001

0800031c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	0002      	movs	r2, r0
 8000324:	1dfb      	adds	r3, r7, #7
 8000326:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000328:	1dfb      	adds	r3, r7, #7
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b7f      	cmp	r3, #127	; 0x7f
 800032e:	d809      	bhi.n	8000344 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000330:	1dfb      	adds	r3, r7, #7
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	001a      	movs	r2, r3
 8000336:	231f      	movs	r3, #31
 8000338:	401a      	ands	r2, r3
 800033a:	4b04      	ldr	r3, [pc, #16]	; (800034c <__NVIC_EnableIRQ+0x30>)
 800033c:	2101      	movs	r1, #1
 800033e:	4091      	lsls	r1, r2
 8000340:	000a      	movs	r2, r1
 8000342:	601a      	str	r2, [r3, #0]
  }
}
 8000344:	46c0      	nop			; (mov r8, r8)
 8000346:	46bd      	mov	sp, r7
 8000348:	b002      	add	sp, #8
 800034a:	bd80      	pop	{r7, pc}
 800034c:	e000e100 	.word	0xe000e100

08000350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000350:	b590      	push	{r4, r7, lr}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	0002      	movs	r2, r0
 8000358:	6039      	str	r1, [r7, #0]
 800035a:	1dfb      	adds	r3, r7, #7
 800035c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800035e:	1dfb      	adds	r3, r7, #7
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	2b7f      	cmp	r3, #127	; 0x7f
 8000364:	d828      	bhi.n	80003b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000366:	4a2f      	ldr	r2, [pc, #188]	; (8000424 <__NVIC_SetPriority+0xd4>)
 8000368:	1dfb      	adds	r3, r7, #7
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	b25b      	sxtb	r3, r3
 800036e:	089b      	lsrs	r3, r3, #2
 8000370:	33c0      	adds	r3, #192	; 0xc0
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	589b      	ldr	r3, [r3, r2]
 8000376:	1dfa      	adds	r2, r7, #7
 8000378:	7812      	ldrb	r2, [r2, #0]
 800037a:	0011      	movs	r1, r2
 800037c:	2203      	movs	r2, #3
 800037e:	400a      	ands	r2, r1
 8000380:	00d2      	lsls	r2, r2, #3
 8000382:	21ff      	movs	r1, #255	; 0xff
 8000384:	4091      	lsls	r1, r2
 8000386:	000a      	movs	r2, r1
 8000388:	43d2      	mvns	r2, r2
 800038a:	401a      	ands	r2, r3
 800038c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	019b      	lsls	r3, r3, #6
 8000392:	22ff      	movs	r2, #255	; 0xff
 8000394:	401a      	ands	r2, r3
 8000396:	1dfb      	adds	r3, r7, #7
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	0018      	movs	r0, r3
 800039c:	2303      	movs	r3, #3
 800039e:	4003      	ands	r3, r0
 80003a0:	00db      	lsls	r3, r3, #3
 80003a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003a4:	481f      	ldr	r0, [pc, #124]	; (8000424 <__NVIC_SetPriority+0xd4>)
 80003a6:	1dfb      	adds	r3, r7, #7
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	b25b      	sxtb	r3, r3
 80003ac:	089b      	lsrs	r3, r3, #2
 80003ae:	430a      	orrs	r2, r1
 80003b0:	33c0      	adds	r3, #192	; 0xc0
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80003b6:	e031      	b.n	800041c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003b8:	4a1b      	ldr	r2, [pc, #108]	; (8000428 <__NVIC_SetPriority+0xd8>)
 80003ba:	1dfb      	adds	r3, r7, #7
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	0019      	movs	r1, r3
 80003c0:	230f      	movs	r3, #15
 80003c2:	400b      	ands	r3, r1
 80003c4:	3b08      	subs	r3, #8
 80003c6:	089b      	lsrs	r3, r3, #2
 80003c8:	3306      	adds	r3, #6
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	18d3      	adds	r3, r2, r3
 80003ce:	3304      	adds	r3, #4
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	1dfa      	adds	r2, r7, #7
 80003d4:	7812      	ldrb	r2, [r2, #0]
 80003d6:	0011      	movs	r1, r2
 80003d8:	2203      	movs	r2, #3
 80003da:	400a      	ands	r2, r1
 80003dc:	00d2      	lsls	r2, r2, #3
 80003de:	21ff      	movs	r1, #255	; 0xff
 80003e0:	4091      	lsls	r1, r2
 80003e2:	000a      	movs	r2, r1
 80003e4:	43d2      	mvns	r2, r2
 80003e6:	401a      	ands	r2, r3
 80003e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	019b      	lsls	r3, r3, #6
 80003ee:	22ff      	movs	r2, #255	; 0xff
 80003f0:	401a      	ands	r2, r3
 80003f2:	1dfb      	adds	r3, r7, #7
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	0018      	movs	r0, r3
 80003f8:	2303      	movs	r3, #3
 80003fa:	4003      	ands	r3, r0
 80003fc:	00db      	lsls	r3, r3, #3
 80003fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000400:	4809      	ldr	r0, [pc, #36]	; (8000428 <__NVIC_SetPriority+0xd8>)
 8000402:	1dfb      	adds	r3, r7, #7
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	001c      	movs	r4, r3
 8000408:	230f      	movs	r3, #15
 800040a:	4023      	ands	r3, r4
 800040c:	3b08      	subs	r3, #8
 800040e:	089b      	lsrs	r3, r3, #2
 8000410:	430a      	orrs	r2, r1
 8000412:	3306      	adds	r3, #6
 8000414:	009b      	lsls	r3, r3, #2
 8000416:	18c3      	adds	r3, r0, r3
 8000418:	3304      	adds	r3, #4
 800041a:	601a      	str	r2, [r3, #0]
}
 800041c:	46c0      	nop			; (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	b003      	add	sp, #12
 8000422:	bd90      	pop	{r4, r7, pc}
 8000424:	e000e100 	.word	0xe000e100
 8000428:	e000ed00 	.word	0xe000ed00

0800042c <LL_ADC_SetCommonFrequencyMode>:
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_HIGH
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonFrequencyMode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonFrequencyMode)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a05      	ldr	r2, [pc, #20]	; (8000450 <LL_ADC_SetCommonFrequencyMode+0x24>)
 800043c:	401a      	ands	r2, r3
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	431a      	orrs	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	601a      	str	r2, [r3, #0]
}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	b002      	add	sp, #8
 800044c:	bd80      	pop	{r7, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	fdffffff 	.word	0xfdffffff

08000454 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	2207      	movs	r2, #7
 8000464:	4393      	bics	r3, r2
 8000466:	001a      	movs	r2, r3
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	431a      	orrs	r2, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	615a      	str	r2, [r3, #20]
}
 8000470:	46c0      	nop			; (mov r8, r8)
 8000472:	46bd      	mov	sp, r7
 8000474:	b002      	add	sp, #8
 8000476:	bd80      	pop	{r7, pc}

08000478 <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	2204      	movs	r2, #4
 8000488:	4393      	bics	r3, r2
 800048a:	001a      	movs	r2, r3
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	431a      	orrs	r2, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	60da      	str	r2, [r3, #12]
}
 8000494:	46c0      	nop			; (mov r8, r8)
 8000496:	46bd      	mov	sp, r7
 8000498:	b002      	add	sp, #8
 800049a:	bd80      	pop	{r7, pc}

0800049c <LL_ADC_REG_SetSequencerChAdd>:
  *
  *         (1) On STM32L0, parameter not available on all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	035b      	lsls	r3, r3, #13
 80004ae:	0b5b      	lsrs	r3, r3, #13
 80004b0:	431a      	orrs	r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b002      	add	sp, #8
 80004bc:	bd80      	pop	{r7, pc}

080004be <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	b082      	sub	sp, #8
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
 80004c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	691b      	ldr	r3, [r3, #16]
 80004cc:	2201      	movs	r2, #1
 80004ce:	4393      	bics	r3, r2
 80004d0:	001a      	movs	r2, r3
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	431a      	orrs	r2, r3
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	611a      	str	r2, [r3, #16]
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b002      	add	sp, #8
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	4a05      	ldr	r2, [pc, #20]	; (8000508 <LL_ADC_EnableInternalRegulator+0x24>)
 80004f2:	4013      	ands	r3, r2
 80004f4:	2280      	movs	r2, #128	; 0x80
 80004f6:	0552      	lsls	r2, r2, #21
 80004f8:	431a      	orrs	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	b002      	add	sp, #8
 8000504:	bd80      	pop	{r7, pc}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	6fffffe8 	.word	0x6fffffe8

0800050c <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	2204      	movs	r2, #4
 800051a:	4393      	bics	r3, r2
 800051c:	001a      	movs	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	605a      	str	r2, [r3, #4]
}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	b002      	add	sp, #8
 8000528:	bd80      	pop	{r7, pc}

0800052a <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSEQIE        LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	2208      	movs	r2, #8
 8000538:	4393      	bics	r3, r2
 800053a:	001a      	movs	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	605a      	str	r2, [r3, #4]
}
 8000540:	46c0      	nop			; (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	b002      	add	sp, #8
 8000546:	bd80      	pop	{r7, pc}

08000548 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <LL_RCC_HSI_Enable+0x18>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <LL_RCC_HSI_Enable+0x18>)
 8000552:	2101      	movs	r1, #1
 8000554:	430a      	orrs	r2, r1
 8000556:	601a      	str	r2, [r3, #0]
}
 8000558:	46c0      	nop			; (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	40021000 	.word	0x40021000

08000564 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <LL_RCC_HSI_IsReady+0x1c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2204      	movs	r2, #4
 800056e:	4013      	ands	r3, r2
 8000570:	2b04      	cmp	r3, #4
 8000572:	d101      	bne.n	8000578 <LL_RCC_HSI_IsReady+0x14>
 8000574:	2301      	movs	r3, #1
 8000576:	e000      	b.n	800057a <LL_RCC_HSI_IsReady+0x16>
 8000578:	2300      	movs	r3, #0
}
 800057a:	0018      	movs	r0, r3
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000

08000584 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	4a06      	ldr	r2, [pc, #24]	; (80005ac <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000592:	4013      	ands	r3, r2
 8000594:	0019      	movs	r1, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	021a      	lsls	r2, r3, #8
 800059a:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800059c:	430a      	orrs	r2, r1
 800059e:	605a      	str	r2, [r3, #4]
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b002      	add	sp, #8
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40021000 	.word	0x40021000
 80005ac:	ffffe0ff 	.word	0xffffe0ff

080005b0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <LL_RCC_SetSysClkSource+0x24>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	2203      	movs	r2, #3
 80005be:	4393      	bics	r3, r2
 80005c0:	0019      	movs	r1, r3
 80005c2:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <LL_RCC_SetSysClkSource+0x24>)
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	430a      	orrs	r2, r1
 80005c8:	60da      	str	r2, [r3, #12]
}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b002      	add	sp, #8
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	40021000 	.word	0x40021000

080005d8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <LL_RCC_GetSysClkSource+0x14>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	220c      	movs	r2, #12
 80005e2:	4013      	ands	r3, r2
}
 80005e4:	0018      	movs	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	40021000 	.word	0x40021000

080005f0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <LL_RCC_SetAHBPrescaler+0x24>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	22f0      	movs	r2, #240	; 0xf0
 80005fe:	4393      	bics	r3, r2
 8000600:	0019      	movs	r1, r3
 8000602:	4b04      	ldr	r3, [pc, #16]	; (8000614 <LL_RCC_SetAHBPrescaler+0x24>)
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	430a      	orrs	r2, r1
 8000608:	60da      	str	r2, [r3, #12]
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b002      	add	sp, #8
 8000610:	bd80      	pop	{r7, pc}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	40021000 	.word	0x40021000

08000618 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	4a06      	ldr	r2, [pc, #24]	; (8000640 <LL_RCC_SetAPB1Prescaler+0x28>)
 8000626:	4013      	ands	r3, r2
 8000628:	0019      	movs	r1, r3
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <LL_RCC_SetAPB1Prescaler+0x24>)
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	430a      	orrs	r2, r1
 8000630:	60da      	str	r2, [r3, #12]
}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b002      	add	sp, #8
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	40021000 	.word	0x40021000
 8000640:	fffff8ff 	.word	0xfffff8ff

08000644 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <LL_RCC_SetAPB2Prescaler+0x24>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	4a06      	ldr	r2, [pc, #24]	; (800066c <LL_RCC_SetAPB2Prescaler+0x28>)
 8000652:	4013      	ands	r3, r2
 8000654:	0019      	movs	r1, r3
 8000656:	4b04      	ldr	r3, [pc, #16]	; (8000668 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	430a      	orrs	r2, r1
 800065c:	60da      	str	r2, [r3, #12]
}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b002      	add	sp, #8
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	40021000 	.word	0x40021000
 800066c:	ffffc7ff 	.word	0xffffc7ff

08000670 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <LL_RCC_SetUSARTClockSource+0x2c>)
 800067a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	0c12      	lsrs	r2, r2, #16
 8000680:	43d2      	mvns	r2, r2
 8000682:	401a      	ands	r2, r3
 8000684:	0011      	movs	r1, r2
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	041b      	lsls	r3, r3, #16
 800068a:	0c1a      	lsrs	r2, r3, #16
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <LL_RCC_SetUSARTClockSource+0x2c>)
 800068e:	430a      	orrs	r2, r1
 8000690:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	b002      	add	sp, #8
 8000698:	bd80      	pop	{r7, pc}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	40021000 	.word	0x40021000

080006a0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <LL_APB1_GRP1_EnableClock+0x28>)
 80006aa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <LL_APB1_GRP1_EnableClock+0x28>)
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	430a      	orrs	r2, r1
 80006b2:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <LL_APB1_GRP1_EnableClock+0x28>)
 80006b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	4013      	ands	r3, r2
 80006bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006be:	68fb      	ldr	r3, [r7, #12]
}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b004      	add	sp, #16
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40021000 	.word	0x40021000

080006cc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <LL_APB2_GRP1_EnableClock+0x28>)
 80006d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <LL_APB2_GRP1_EnableClock+0x28>)
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	430a      	orrs	r2, r1
 80006de:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <LL_APB2_GRP1_EnableClock+0x28>)
 80006e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	4013      	ands	r3, r2
 80006e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ea:	68fb      	ldr	r3, [r7, #12]
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b004      	add	sp, #16
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40021000 	.word	0x40021000

080006f8 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <LL_IOP_GRP1_EnableClock+0x28>)
 8000702:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <LL_IOP_GRP1_EnableClock+0x28>)
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	430a      	orrs	r2, r1
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <LL_IOP_GRP1_EnableClock+0x28>)
 800070e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	4013      	ands	r3, r2
 8000714:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000716:	68fb      	ldr	r3, [r7, #12]
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b004      	add	sp, #16
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000

08000724 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <LL_FLASH_SetLatency+0x24>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2201      	movs	r2, #1
 8000732:	4393      	bics	r3, r2
 8000734:	0019      	movs	r1, r3
 8000736:	4b04      	ldr	r3, [pc, #16]	; (8000748 <LL_FLASH_SetLatency+0x24>)
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	430a      	orrs	r2, r1
 800073c:	601a      	str	r2, [r3, #0]
}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b002      	add	sp, #8
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	40022000 	.word	0x40022000

0800074c <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <LL_FLASH_GetLatency+0x14>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2201      	movs	r2, #1
 8000756:	4013      	ands	r3, r2
}
 8000758:	0018      	movs	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	40022000 	.word	0x40022000

08000764 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a06      	ldr	r2, [pc, #24]	; (800078c <LL_PWR_SetRegulVoltageScaling+0x28>)
 8000772:	4013      	ands	r3, r2
 8000774:	0019      	movs	r1, r3
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	430a      	orrs	r2, r1
 800077c:	601a      	str	r2, [r3, #0]
}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	b002      	add	sp, #8
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	40007000 	.word	0x40007000
 800078c:	ffffe7ff 	.word	0xffffe7ff

08000790 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	2210      	movs	r2, #16
 80007a0:	4393      	bics	r3, r2
 80007a2:	001a      	movs	r2, r3
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	431a      	orrs	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	605a      	str	r2, [r3, #4]
}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b002      	add	sp, #8
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <LL_TIM_DisableARRPreload>:
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2280      	movs	r2, #128	; 0x80
 80007c2:	4393      	bics	r3, r2
 80007c4:	001a      	movs	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	601a      	str	r2, [r3, #0]
}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b002      	add	sp, #8
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <LL_TIM_OC_DisableFast>:
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d00d      	beq.n	8000800 <LL_TIM_OC_DisableFast+0x2c>
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	2b10      	cmp	r3, #16
 80007e8:	d008      	beq.n	80007fc <LL_TIM_OC_DisableFast+0x28>
 80007ea:	683a      	ldr	r2, [r7, #0]
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d101      	bne.n	80007f8 <LL_TIM_OC_DisableFast+0x24>
 80007f4:	2304      	movs	r3, #4
 80007f6:	e004      	b.n	8000802 <LL_TIM_OC_DisableFast+0x2e>
 80007f8:	2306      	movs	r3, #6
 80007fa:	e002      	b.n	8000802 <LL_TIM_OC_DisableFast+0x2e>
 80007fc:	2302      	movs	r3, #2
 80007fe:	e000      	b.n	8000802 <LL_TIM_OC_DisableFast+0x2e>
 8000800:	2300      	movs	r3, #0
 8000802:	200f      	movs	r0, #15
 8000804:	183a      	adds	r2, r7, r0
 8000806:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3318      	adds	r3, #24
 800080c:	0019      	movs	r1, r3
 800080e:	183b      	adds	r3, r7, r0
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <LL_TIM_OC_DisableFast+0x68>)
 8000814:	5cd3      	ldrb	r3, [r2, r3]
 8000816:	18cb      	adds	r3, r1, r3
 8000818:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	183a      	adds	r2, r7, r0
 8000820:	7812      	ldrb	r2, [r2, #0]
 8000822:	4907      	ldr	r1, [pc, #28]	; (8000840 <LL_TIM_OC_DisableFast+0x6c>)
 8000824:	5c8a      	ldrb	r2, [r1, r2]
 8000826:	0011      	movs	r1, r2
 8000828:	2204      	movs	r2, #4
 800082a:	408a      	lsls	r2, r1
 800082c:	43d2      	mvns	r2, r2
 800082e:	401a      	ands	r2, r3
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	601a      	str	r2, [r3, #0]
}
 8000834:	46c0      	nop			; (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	b004      	add	sp, #16
 800083a:	bd80      	pop	{r7, pc}
 800083c:	08002858 	.word	0x08002858
 8000840:	08002860 	.word	0x08002860

08000844 <LL_TIM_OC_EnablePreload>:
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d00d      	beq.n	8000870 <LL_TIM_OC_EnablePreload+0x2c>
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	2b10      	cmp	r3, #16
 8000858:	d008      	beq.n	800086c <LL_TIM_OC_EnablePreload+0x28>
 800085a:	683a      	ldr	r2, [r7, #0]
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	429a      	cmp	r2, r3
 8000862:	d101      	bne.n	8000868 <LL_TIM_OC_EnablePreload+0x24>
 8000864:	2304      	movs	r3, #4
 8000866:	e004      	b.n	8000872 <LL_TIM_OC_EnablePreload+0x2e>
 8000868:	2306      	movs	r3, #6
 800086a:	e002      	b.n	8000872 <LL_TIM_OC_EnablePreload+0x2e>
 800086c:	2302      	movs	r3, #2
 800086e:	e000      	b.n	8000872 <LL_TIM_OC_EnablePreload+0x2e>
 8000870:	2300      	movs	r3, #0
 8000872:	200f      	movs	r0, #15
 8000874:	183a      	adds	r2, r7, r0
 8000876:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3318      	adds	r3, #24
 800087c:	0019      	movs	r1, r3
 800087e:	183b      	adds	r3, r7, r0
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <LL_TIM_OC_EnablePreload+0x68>)
 8000884:	5cd3      	ldrb	r3, [r2, r3]
 8000886:	18cb      	adds	r3, r1, r3
 8000888:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	183b      	adds	r3, r7, r0
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	4907      	ldr	r1, [pc, #28]	; (80008b0 <LL_TIM_OC_EnablePreload+0x6c>)
 8000894:	5ccb      	ldrb	r3, [r1, r3]
 8000896:	0019      	movs	r1, r3
 8000898:	2308      	movs	r3, #8
 800089a:	408b      	lsls	r3, r1
 800089c:	431a      	orrs	r2, r3
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	601a      	str	r2, [r3, #0]
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b004      	add	sp, #16
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	08002858 	.word	0x08002858
 80008b0:	08002860 	.word	0x08002860

080008b4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <LL_TIM_SetClockSource+0x24>)
 80008c4:	401a      	ands	r2, r3
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	431a      	orrs	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	609a      	str	r2, [r3, #8]
}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b002      	add	sp, #8
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	ffffbff8 	.word	0xffffbff8

080008dc <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2270      	movs	r2, #112	; 0x70
 80008ec:	4393      	bics	r3, r2
 80008ee:	001a      	movs	r2, r3
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	431a      	orrs	r2, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	605a      	str	r2, [r3, #4]
}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b002      	add	sp, #8
 80008fe:	bd80      	pop	{r7, pc}

08000900 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	4393      	bics	r3, r2
 8000910:	001a      	movs	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	609a      	str	r2, [r3, #8]
}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	b002      	add	sp, #8
 800091c:	bd80      	pop	{r7, pc}

0800091e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2201      	movs	r2, #1
 800092c:	431a      	orrs	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	601a      	str	r2, [r3, #0]
}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	b002      	add	sp, #8
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	4a07      	ldr	r2, [pc, #28]	; (8000968 <LL_USART_ConfigAsyncMode+0x2c>)
 800094a:	401a      	ands	r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	222a      	movs	r2, #42	; 0x2a
 8000956:	4393      	bics	r3, r2
 8000958:	001a      	movs	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	609a      	str	r2, [r3, #8]
}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b002      	add	sp, #8
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	ffffb7ff 	.word	0xffffb7ff

0800096c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	683a      	ldr	r2, [r7, #0]
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b002      	add	sp, #8
 8000982:	bd80      	pop	{r7, pc}

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098a:	f000 fbd3 	bl	8001134 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098e:	f000 f817 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000992:	f000 fadd 	bl	8000f50 <MX_GPIO_Init>
  MX_ADC_Init();
 8000996:	f000 f855 	bl	8000a44 <MX_ADC_Init>
  MX_SPI1_Init();
 800099a:	f000 f903 	bl	8000ba4 <MX_SPI1_Init>
  MX_TIM2_Init();
 800099e:	f000 f981 	bl	8000ca4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80009a2:	f000 fa5d 	bl	8000e60 <MX_USART2_UART_Init>
  MX_TIM21_Init();
 80009a6:	f000 fa05 	bl	8000db4 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */

  LedStart();
 80009aa:	f7ff fc62 	bl	8000272 <LedStart>
  uint8_t i = 0;
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
  {
	  /*
	  LedSetValue(i);
	  if(++i > 250) i = 0;
	  */
	  LedPulse();
 80009b4:	f7ff fc86 	bl	80002c4 <LedPulse>
	  LL_mDelay(10);
 80009b8:	200a      	movs	r0, #10
 80009ba:	f001 fee5 	bl	8002788 <LL_mDelay>
	  LedPulse();
 80009be:	e7f9      	b.n	80009b4 <main+0x30>

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff fead 	bl	8000724 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	f7ff febe 	bl	800074c <LL_FLASH_GetLatency>
 80009d0:	1e03      	subs	r3, r0, #0
 80009d2:	d1fb      	bne.n	80009cc <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	0018      	movs	r0, r3
 80009da:	f7ff fec3 	bl	8000764 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 80009de:	f7ff fdb3 	bl	8000548 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	f7ff fdbe 	bl	8000564 <LL_RCC_HSI_IsReady>
 80009e8:	0003      	movs	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d1fa      	bne.n	80009e4 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80009ee:	2010      	movs	r0, #16
 80009f0:	f7ff fdc8 	bl	8000584 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80009f4:	2000      	movs	r0, #0
 80009f6:	f7ff fdfb 	bl	80005f0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80009fa:	2000      	movs	r0, #0
 80009fc:	f7ff fe0c 	bl	8000618 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff fe1f 	bl	8000644 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000a06:	2001      	movs	r0, #1
 8000a08:	f7ff fdd2 	bl	80005b0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	f7ff fde3 	bl	80005d8 <LL_RCC_GetSysClkSource>
 8000a12:	0003      	movs	r3, r0
 8000a14:	2b04      	cmp	r3, #4
 8000a16:	d1fa      	bne.n	8000a0e <SystemClock_Config+0x4e>
  {

  }
  LL_SetSystemCoreClock(16000000);
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <SystemClock_Config+0x80>)
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f001 fed6 	bl	80027cc <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000a20:	2003      	movs	r0, #3
 8000a22:	f000 fba7 	bl	8001174 <HAL_InitTick>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a2a:	f000 fada 	bl	8000fe2 <Error_Handler>
  }
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000a2e:	23c0      	movs	r3, #192	; 0xc0
 8000a30:	031b      	lsls	r3, r3, #12
 8000a32:	0018      	movs	r0, r3
 8000a34:	f7ff fe1c 	bl	8000670 <LL_RCC_SetUSARTClockSource>
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	00f42400 	.word	0x00f42400

08000a44 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000a44:	b5b0      	push	{r4, r5, r7, lr}
 8000a46:	b090      	sub	sp, #64	; 0x40
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000a4a:	2428      	movs	r4, #40	; 0x28
 8000a4c:	193b      	adds	r3, r7, r4
 8000a4e:	0018      	movs	r0, r3
 8000a50:	2314      	movs	r3, #20
 8000a52:	001a      	movs	r2, r3
 8000a54:	2100      	movs	r1, #0
 8000a56:	f001 feeb 	bl	8002830 <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000a5a:	2518      	movs	r5, #24
 8000a5c:	197b      	adds	r3, r7, r5
 8000a5e:	0018      	movs	r0, r3
 8000a60:	2310      	movs	r3, #16
 8000a62:	001a      	movs	r2, r3
 8000a64:	2100      	movs	r1, #0
 8000a66:	f001 fee3 	bl	8002830 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	003b      	movs	r3, r7
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	2318      	movs	r3, #24
 8000a70:	001a      	movs	r2, r3
 8000a72:	2100      	movs	r1, #0
 8000a74:	f001 fedc 	bl	8002830 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff fe25 	bl	80006cc <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000a82:	2001      	movs	r0, #1
 8000a84:	f7ff fe38 	bl	80006f8 <LL_IOP_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PA1   ------> ADC_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000a88:	003b      	movs	r3, r7
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a8e:	003b      	movs	r3, r7
 8000a90:	2203      	movs	r2, #3
 8000a92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a94:	003b      	movs	r3, r7
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	003a      	movs	r2, r7
 8000a9c:	23a0      	movs	r3, #160	; 0xa0
 8000a9e:	05db      	lsls	r3, r3, #23
 8000aa0:	0011      	movs	r1, r2
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f001 f913 	bl	8001cce <LL_GPIO_Init>

  /* ADC interrupt Init */
  NVIC_SetPriority(ADC1_COMP_IRQn, 0);
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	200c      	movs	r0, #12
 8000aac:	f7ff fc50 	bl	8000350 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000ab0:	200c      	movs	r0, #12
 8000ab2:	f7ff fc33 	bl	800031c <__NVIC_EnableIRQ>

  /* USER CODE END ADC_Init 1 */

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_1);
 8000ab6:	4a36      	ldr	r2, [pc, #216]	; (8000b90 <MX_ADC_Init+0x14c>)
 8000ab8:	4b36      	ldr	r3, [pc, #216]	; (8000b94 <MX_ADC_Init+0x150>)
 8000aba:	0011      	movs	r1, r2
 8000abc:	0018      	movs	r0, r3
 8000abe:	f7ff fced 	bl	800049c <LL_ADC_REG_SetSequencerChAdd>

  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000ac2:	0021      	movs	r1, r4
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	4a2b      	ldr	r2, [pc, #172]	; (8000b94 <MX_ADC_Init+0x150>)
 8000ae6:	0019      	movs	r1, r3
 8000ae8:	0010      	movs	r0, r2
 8000aea:	f001 f805 	bl	8001af8 <LL_ADC_REG_Init>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8000aee:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <MX_ADC_Init+0x150>)
 8000af0:	2100      	movs	r1, #0
 8000af2:	0018      	movs	r0, r3
 8000af4:	f7ff fcae 	bl	8000454 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8000af8:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <MX_ADC_Init+0x150>)
 8000afa:	2100      	movs	r1, #0
 8000afc:	0018      	movs	r0, r3
 8000afe:	f7ff fcde 	bl	80004be <LL_ADC_SetOverSamplingScope>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8000b02:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <MX_ADC_Init+0x150>)
 8000b04:	2100      	movs	r1, #0
 8000b06:	0018      	movs	r0, r3
 8000b08:	f7ff fcb6 	bl	8000478 <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_HIGH);
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <MX_ADC_Init+0x154>)
 8000b0e:	2100      	movs	r1, #0
 8000b10:	0018      	movs	r0, r3
 8000b12:	f7ff fc8b 	bl	800042c <LL_ADC_SetCommonFrequencyMode>
  LL_ADC_DisableIT_EOC(ADC1);
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <MX_ADC_Init+0x150>)
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f7ff fcf7 	bl	800050c <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_ADC_Init+0x150>)
 8000b20:	0018      	movs	r0, r3
 8000b22:	f7ff fd02 	bl	800052a <LL_ADC_DisableIT_EOS>
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV1;
 8000b26:	197b      	adds	r3, r7, r5
 8000b28:	22c0      	movs	r2, #192	; 0xc0
 8000b2a:	0612      	lsls	r2, r2, #24
 8000b2c:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000b2e:	197b      	adds	r3, r7, r5
 8000b30:	2200      	movs	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000b34:	197b      	adds	r3, r7, r5
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000b3a:	197b      	adds	r3, r7, r5
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000b40:	197b      	adds	r3, r7, r5
 8000b42:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <MX_ADC_Init+0x150>)
 8000b44:	0019      	movs	r1, r3
 8000b46:	0010      	movs	r0, r2
 8000b48:	f000 ffa0 	bl	8001a8c <LL_ADC_Init>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_ADC_Init+0x150>)
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f7ff fcc8 	bl	80004e4 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_ADC_Init+0x158>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4911      	ldr	r1, [pc, #68]	; (8000ba0 <MX_ADC_Init+0x15c>)
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f7ff fad4 	bl	8000108 <__udivsi3>
 8000b60:	0003      	movs	r3, r0
 8000b62:	001a      	movs	r2, r3
 8000b64:	0013      	movs	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	189b      	adds	r3, r3, r2
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	210a      	movs	r1, #10
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f7ff faca 	bl	8000108 <__udivsi3>
 8000b74:	0003      	movs	r3, r0
 8000b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8000b78:	e002      	b.n	8000b80 <MX_ADC_Init+0x13c>
  {
    wait_loop_index--;
 8000b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8000b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1f9      	bne.n	8000b7a <MX_ADC_Init+0x136>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b010      	add	sp, #64	; 0x40
 8000b8e:	bdb0      	pop	{r4, r5, r7, pc}
 8000b90:	04000002 	.word	0x04000002
 8000b94:	40012400 	.word	0x40012400
 8000b98:	40012708 	.word	0x40012708
 8000b9c:	20000004 	.word	0x20000004
 8000ba0:	00030d40 	.word	0x00030d40

08000ba4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b091      	sub	sp, #68	; 0x44
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000baa:	2418      	movs	r4, #24
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	0018      	movs	r0, r3
 8000bb0:	2328      	movs	r3, #40	; 0x28
 8000bb2:	001a      	movs	r2, r3
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	f001 fe3b 	bl	8002830 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	003b      	movs	r3, r7
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	2318      	movs	r3, #24
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	f001 fe34 	bl	8002830 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	015b      	lsls	r3, r3, #5
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff fd7d 	bl	80006cc <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f7ff fd90 	bl	80006f8 <LL_IOP_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000bd8:	003b      	movs	r3, r7
 8000bda:	2220      	movs	r2, #32
 8000bdc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000bde:	003b      	movs	r3, r7
 8000be0:	2202      	movs	r2, #2
 8000be2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	003b      	movs	r3, r7
 8000be6:	2203      	movs	r2, #3
 8000be8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bea:	003b      	movs	r3, r7
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bf0:	003b      	movs	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000bf6:	003b      	movs	r3, r7
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfc:	003a      	movs	r2, r7
 8000bfe:	23a0      	movs	r3, #160	; 0xa0
 8000c00:	05db      	lsls	r3, r3, #23
 8000c02:	0011      	movs	r1, r2
 8000c04:	0018      	movs	r0, r3
 8000c06:	f001 f862 	bl	8001cce <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c10:	003b      	movs	r3, r7
 8000c12:	2202      	movs	r2, #2
 8000c14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	003b      	movs	r3, r7
 8000c18:	2203      	movs	r2, #3
 8000c1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c1c:	003b      	movs	r3, r7
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c22:	003b      	movs	r3, r7
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000c28:	003b      	movs	r3, r7
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	003a      	movs	r2, r7
 8000c30:	23a0      	movs	r3, #160	; 0xa0
 8000c32:	05db      	lsls	r3, r3, #23
 8000c34:	0011      	movs	r1, r2
 8000c36:	0018      	movs	r0, r3
 8000c38:	f001 f849 	bl	8001cce <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000c3c:	0021      	movs	r1, r4
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2282      	movs	r2, #130	; 0x82
 8000c48:	0052      	lsls	r2, r2, #1
 8000c4a:	605a      	str	r2, [r3, #4]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_16BIT;
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2280      	movs	r2, #128	; 0x80
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	609a      	str	r2, [r3, #8]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2280      	movs	r2, #128	; 0x80
 8000c64:	0092      	lsls	r2, r2, #2
 8000c66:	615a      	str	r2, [r3, #20]
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	2200      	movs	r2, #0
 8000c78:	621a      	str	r2, [r3, #32]
  SPI_InitStruct.CRCPoly = 7;
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	2207      	movs	r2, #7
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <MX_SPI1_Init+0xfc>)
 8000c84:	0019      	movs	r1, r3
 8000c86:	0010      	movs	r0, r2
 8000c88:	f001 fa38 	bl	80020fc <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <MX_SPI1_Init+0xfc>)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	0018      	movs	r0, r3
 8000c92:	f7ff fd7d 	bl	8000790 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b011      	add	sp, #68	; 0x44
 8000c9c:	bd90      	pop	{r4, r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	40013000 	.word	0x40013000

08000ca4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ca4:	b5b0      	push	{r4, r5, r7, lr}
 8000ca6:	b08e      	sub	sp, #56	; 0x38
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000caa:	2428      	movs	r4, #40	; 0x28
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	0018      	movs	r0, r3
 8000cb0:	2310      	movs	r3, #16
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	f001 fdbb 	bl	8002830 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000cba:	2518      	movs	r5, #24
 8000cbc:	197b      	adds	r3, r7, r5
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	2310      	movs	r3, #16
 8000cc2:	001a      	movs	r2, r3
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	f001 fdb3 	bl	8002830 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cca:	003b      	movs	r3, r7
 8000ccc:	0018      	movs	r0, r3
 8000cce:	2318      	movs	r3, #24
 8000cd0:	001a      	movs	r2, r3
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	f001 fdac 	bl	8002830 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f7ff fce1 	bl	80006a0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 63;
 8000cde:	193b      	adds	r3, r7, r4
 8000ce0:	223f      	movs	r2, #63	; 0x3f
 8000ce2:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000ce4:	193b      	adds	r3, r7, r4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 255;
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	22ff      	movs	r2, #255	; 0xff
 8000cee:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000cf0:	193b      	adds	r3, r7, r4
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000cf6:	193a      	adds	r2, r7, r4
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	05db      	lsls	r3, r3, #23
 8000cfc:	0011      	movs	r1, r2
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f001 faa8 	bl	8002254 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	05db      	lsls	r3, r3, #23
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff fd53 	bl	80007b4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	05db      	lsls	r3, r3, #23
 8000d12:	2100      	movs	r1, #0
 8000d14:	0018      	movs	r0, r3
 8000d16:	f7ff fdcd 	bl	80008b4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	05db      	lsls	r3, r3, #23
 8000d1e:	2101      	movs	r1, #1
 8000d20:	0018      	movs	r0, r3
 8000d22:	f7ff fd8f 	bl	8000844 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000d26:	0029      	movs	r1, r5
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2260      	movs	r2, #96	; 0x60
 8000d2c:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2200      	movs	r2, #0
 8000d32:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.CompareValue = 0;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000d40:	187a      	adds	r2, r7, r1
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	05db      	lsls	r3, r3, #23
 8000d46:	2101      	movs	r1, #1
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f001 facb 	bl	80022e4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	05db      	lsls	r3, r3, #23
 8000d52:	2101      	movs	r1, #1
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff fd3d 	bl	80007d4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	05db      	lsls	r3, r3, #23
 8000d5e:	2100      	movs	r1, #0
 8000d60:	0018      	movs	r0, r3
 8000d62:	f7ff fdbb 	bl	80008dc <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000d66:	2380      	movs	r3, #128	; 0x80
 8000d68:	05db      	lsls	r3, r3, #23
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff fdc8 	bl	8000900 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f7ff fcc1 	bl	80006f8 <LL_IOP_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA8   ------> TIM2_CH1
  */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 8000d76:	003b      	movs	r3, r7
 8000d78:	2280      	movs	r2, #128	; 0x80
 8000d7a:	0052      	lsls	r2, r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d7e:	003b      	movs	r3, r7
 8000d80:	2202      	movs	r2, #2
 8000d82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d84:	003b      	movs	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d8a:	003b      	movs	r3, r7
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d90:	003b      	movs	r3, r7
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000d96:	003b      	movs	r3, r7
 8000d98:	2205      	movs	r2, #5
 8000d9a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	003a      	movs	r2, r7
 8000d9e:	23a0      	movs	r3, #160	; 0xa0
 8000da0:	05db      	lsls	r3, r3, #23
 8000da2:	0011      	movs	r1, r2
 8000da4:	0018      	movs	r0, r3
 8000da6:	f000 ff92 	bl	8001cce <LL_GPIO_Init>

}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b00e      	add	sp, #56	; 0x38
 8000db0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000db4 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dba:	2308      	movs	r3, #8
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	2310      	movs	r3, #16
 8000dc2:	001a      	movs	r2, r3
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	f001 fd33 	bl	8002830 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dca:	003b      	movs	r3, r7
 8000dcc:	0018      	movs	r0, r3
 8000dce:	2308      	movs	r3, #8
 8000dd0:	001a      	movs	r2, r3
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	f001 fd2c 	bl	8002830 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_TIM21_Init+0xa4>)
 8000dda:	4a20      	ldr	r2, [pc, #128]	; (8000e5c <MX_TIM21_Init+0xa8>)
 8000ddc:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 16000;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <MX_TIM21_Init+0xa4>)
 8000de0:	22fa      	movs	r2, #250	; 0xfa
 8000de2:	0192      	lsls	r2, r2, #6
 8000de4:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_TIM21_Init+0xa4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 1000;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_TIM21_Init+0xa4>)
 8000dee:	22fa      	movs	r2, #250	; 0xfa
 8000df0:	0092      	lsls	r2, r2, #2
 8000df2:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <MX_TIM21_Init+0xa4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_TIM21_Init+0xa4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <MX_TIM21_Init+0xa4>)
 8000e02:	0018      	movs	r0, r3
 8000e04:	f000 fada 	bl	80013bc <HAL_TIM_Base_Init>
 8000e08:	1e03      	subs	r3, r0, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM21_Init+0x5c>
  {
    Error_Handler();
 8000e0c:	f000 f8e9 	bl	8000fe2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e10:	2108      	movs	r1, #8
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2280      	movs	r2, #128	; 0x80
 8000e16:	0152      	lsls	r2, r2, #5
 8000e18:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000e1a:	187a      	adds	r2, r7, r1
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_TIM21_Init+0xa4>)
 8000e1e:	0011      	movs	r1, r2
 8000e20:	0018      	movs	r0, r3
 8000e22:	f000 fbf3 	bl	800160c <HAL_TIM_ConfigClockSource>
 8000e26:	1e03      	subs	r3, r0, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM21_Init+0x7a>
  {
    Error_Handler();
 8000e2a:	f000 f8da 	bl	8000fe2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2e:	003b      	movs	r3, r7
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e34:	003b      	movs	r3, r7
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000e3a:	003a      	movs	r2, r7
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_TIM21_Init+0xa4>)
 8000e3e:	0011      	movs	r1, r2
 8000e40:	0018      	movs	r0, r3
 8000e42:	f000 fdc3 	bl	80019cc <HAL_TIMEx_MasterConfigSynchronization>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM21_Init+0x9a>
  {
    Error_Handler();
 8000e4a:	f000 f8ca 	bl	8000fe2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b006      	add	sp, #24
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	2000002c 	.word	0x2000002c
 8000e5c:	40010800 	.word	0x40010800

08000e60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b08f      	sub	sp, #60	; 0x3c
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000e66:	241c      	movs	r4, #28
 8000e68:	193b      	adds	r3, r7, r4
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	231c      	movs	r3, #28
 8000e6e:	001a      	movs	r2, r3
 8000e70:	2100      	movs	r1, #0
 8000e72:	f001 fcdd 	bl	8002830 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	0018      	movs	r0, r3
 8000e7a:	2318      	movs	r3, #24
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	2100      	movs	r1, #0
 8000e80:	f001 fcd6 	bl	8002830 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	029b      	lsls	r3, r3, #10
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff fc09 	bl	80006a0 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f7ff fc32 	bl	80006f8 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA0-CK_IN   ------> USART2_RX
  PA2   ------> USART2_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2201      	movs	r2, #1
 8000e98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb8:	1d3a      	adds	r2, r7, #4
 8000eba:	23a0      	movs	r3, #160	; 0xa0
 8000ebc:	05db      	lsls	r3, r3, #23
 8000ebe:	0011      	movs	r1, r2
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f000 ff04 	bl	8001cce <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2204      	movs	r2, #4
 8000eca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2202      	movs	r2, #2
 8000ed0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eea:	1d3a      	adds	r2, r7, #4
 8000eec:	23a0      	movs	r3, #160	; 0xa0
 8000eee:	05db      	lsls	r3, r3, #23
 8000ef0:	0011      	movs	r1, r2
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 feeb 	bl	8001cce <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000ef8:	193b      	adds	r3, r7, r4
 8000efa:	22e1      	movs	r2, #225	; 0xe1
 8000efc:	0252      	lsls	r2, r2, #9
 8000efe:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000f00:	0021      	movs	r1, r4
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	220c      	movs	r2, #12
 8000f18:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2200      	movs	r2, #0
 8000f24:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	4a08      	ldr	r2, [pc, #32]	; (8000f4c <MX_USART2_UART_Init+0xec>)
 8000f2a:	0019      	movs	r1, r3
 8000f2c:	0010      	movs	r0, r2
 8000f2e:	f001 fbd3 	bl	80026d8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_USART2_UART_Init+0xec>)
 8000f34:	0018      	movs	r0, r3
 8000f36:	f7ff fd01 	bl	800093c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <MX_USART2_UART_Init+0xec>)
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f7ff fcee 	bl	800091e <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b00f      	add	sp, #60	; 0x3c
 8000f48:	bd90      	pop	{r4, r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	40004400 	.word	0x40004400

08000f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	003b      	movs	r3, r7
 8000f58:	0018      	movs	r0, r3
 8000f5a:	2318      	movs	r3, #24
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	f001 fc66 	bl	8002830 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000f64:	2001      	movs	r0, #1
 8000f66:	f7ff fbc7 	bl	80006f8 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(DAC_nLDAC_GPIO_Port, DAC_nLDAC_Pin);
 8000f6a:	23a0      	movs	r3, #160	; 0xa0
 8000f6c:	05db      	lsls	r3, r3, #23
 8000f6e:	2108      	movs	r1, #8
 8000f70:	0018      	movs	r0, r3
 8000f72:	f7ff fcfb 	bl	800096c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DAC_nCS_GPIO_Port, DAC_nCS_Pin);
 8000f76:	23a0      	movs	r3, #160	; 0xa0
 8000f78:	05db      	lsls	r3, r3, #23
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f7ff fcf5 	bl	800096c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = DAC_nLDAC_Pin;
 8000f82:	003b      	movs	r3, r7
 8000f84:	2208      	movs	r2, #8
 8000f86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f88:	003b      	movs	r3, r7
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f8e:	003b      	movs	r3, r7
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f94:	003b      	movs	r3, r7
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f9a:	003b      	movs	r3, r7
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DAC_nLDAC_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	003a      	movs	r2, r7
 8000fa2:	23a0      	movs	r3, #160	; 0xa0
 8000fa4:	05db      	lsls	r3, r3, #23
 8000fa6:	0011      	movs	r1, r2
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f000 fe90 	bl	8001cce <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DAC_nCS_Pin;
 8000fae:	003b      	movs	r3, r7
 8000fb0:	2210      	movs	r2, #16
 8000fb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fb4:	003b      	movs	r3, r7
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fba:	003b      	movs	r3, r7
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fc0:	003b      	movs	r3, r7
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fc6:	003b      	movs	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DAC_nCS_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	003a      	movs	r2, r7
 8000fce:	23a0      	movs	r3, #160	; 0xa0
 8000fd0:	05db      	lsls	r3, r3, #23
 8000fd2:	0011      	movs	r1, r2
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f000 fe7a 	bl	8001cce <LL_GPIO_Init>

}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b006      	add	sp, #24
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe6:	b672      	cpsid	i
}
 8000fe8:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fea:	e7fe      	b.n	8000fea <Error_Handler+0x8>

08000fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <HAL_MspInit+0x24>)
 8000ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_MspInit+0x24>)
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <HAL_MspInit+0x24>)
 8000ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <HAL_MspInit+0x24>)
 8001002:	2180      	movs	r1, #128	; 0x80
 8001004:	0549      	lsls	r1, r1, #21
 8001006:	430a      	orrs	r2, r1
 8001008:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40021000 	.word	0x40021000

08001014 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <HAL_TIM_Base_MspInit+0x38>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d10d      	bne.n	8001042 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_TIM_Base_MspInit+0x3c>)
 8001028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_TIM_Base_MspInit+0x3c>)
 800102c:	2104      	movs	r1, #4
 800102e:	430a      	orrs	r2, r1
 8001030:	635a      	str	r2, [r3, #52]	; 0x34
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	2014      	movs	r0, #20
 8001038:	f000 f98e 	bl	8001358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 800103c:	2014      	movs	r0, #20
 800103e:	f000 f9a0 	bl	8001382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	b002      	add	sp, #8
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	40010800 	.word	0x40010800
 8001050:	40021000 	.word	0x40021000

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <NMI_Handler+0x4>

0800105a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <HardFault_Handler+0x4>

08001060 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001078:	f000 f8b0 	bl	80011dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE END ADC1_COMP_IRQn 0 */

  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <TIM21_IRQHandler+0x14>)
 8001092:	0018      	movs	r0, r3
 8001094:	f000 f9d2 	bl	800143c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	2000002c 	.word	0x2000002c

080010a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80010b0:	4813      	ldr	r0, [pc, #76]	; (8001100 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80010b2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010b4:	f7ff fff6 	bl	80010a4 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80010b8:	4812      	ldr	r0, [pc, #72]	; (8001104 <LoopForever+0x6>)
    LDR R1, [R0]
 80010ba:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80010bc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <LoopForever+0xa>)
    CMP R1, R2
 80010c0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80010c2:	d105      	bne.n	80010d0 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80010c4:	4811      	ldr	r0, [pc, #68]	; (800110c <LoopForever+0xe>)
    LDR R1,=0x00000001
 80010c6:	4912      	ldr	r1, [pc, #72]	; (8001110 <LoopForever+0x12>)
    STR R1, [R0]
 80010c8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80010ca:	4812      	ldr	r0, [pc, #72]	; (8001114 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80010cc:	4912      	ldr	r1, [pc, #72]	; (8001118 <LoopForever+0x1a>)
    STR R1, [R0]
 80010ce:	6001      	str	r1, [r0, #0]

080010d0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d0:	4812      	ldr	r0, [pc, #72]	; (800111c <LoopForever+0x1e>)
  ldr r1, =_edata
 80010d2:	4913      	ldr	r1, [pc, #76]	; (8001120 <LoopForever+0x22>)
  ldr r2, =_sidata
 80010d4:	4a13      	ldr	r2, [pc, #76]	; (8001124 <LoopForever+0x26>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a10      	ldr	r2, [pc, #64]	; (8001128 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80010e8:	4c10      	ldr	r4, [pc, #64]	; (800112c <LoopForever+0x2e>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010f6:	f001 fb77 	bl	80027e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fa:	f7ff fc43 	bl	8000984 <main>

080010fe <LoopForever>:

LoopForever:
    b LoopForever
 80010fe:	e7fe      	b.n	80010fe <LoopForever>
   ldr   r0, =_estack
 8001100:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8001104:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001108:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 800110c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001110:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001114:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001118:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001120:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001124:	08002894 	.word	0x08002894
  ldr r2, =_sbss
 8001128:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800112c:	20000070 	.word	0x20000070

08001130 <AES_LPUART1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001130:	e7fe      	b.n	8001130 <AES_LPUART1_IRQHandler>
	...

08001134 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <HAL_Init+0x3c>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_Init+0x3c>)
 8001146:	2140      	movs	r1, #64	; 0x40
 8001148:	430a      	orrs	r2, r1
 800114a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800114c:	2003      	movs	r0, #3
 800114e:	f000 f811 	bl	8001174 <HAL_InitTick>
 8001152:	1e03      	subs	r3, r0, #0
 8001154:	d003      	beq.n	800115e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001156:	1dfb      	adds	r3, r7, #7
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	e001      	b.n	8001162 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800115e:	f7ff ff45 	bl	8000fec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	781b      	ldrb	r3, [r3, #0]
}
 8001166:	0018      	movs	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	b002      	add	sp, #8
 800116c:	bd80      	pop	{r7, pc}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	40022000 	.word	0x40022000

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <HAL_InitTick+0x5c>)
 800117e:	681c      	ldr	r4, [r3, #0]
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <HAL_InitTick+0x60>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	0019      	movs	r1, r3
 8001186:	23fa      	movs	r3, #250	; 0xfa
 8001188:	0098      	lsls	r0, r3, #2
 800118a:	f7fe ffbd 	bl	8000108 <__udivsi3>
 800118e:	0003      	movs	r3, r0
 8001190:	0019      	movs	r1, r3
 8001192:	0020      	movs	r0, r4
 8001194:	f7fe ffb8 	bl	8000108 <__udivsi3>
 8001198:	0003      	movs	r3, r0
 800119a:	0018      	movs	r0, r3
 800119c:	f000 f901 	bl	80013a2 <HAL_SYSTICK_Config>
 80011a0:	1e03      	subs	r3, r0, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e00f      	b.n	80011c8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d80b      	bhi.n	80011c6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	2301      	movs	r3, #1
 80011b2:	425b      	negs	r3, r3
 80011b4:	2200      	movs	r2, #0
 80011b6:	0018      	movs	r0, r3
 80011b8:	f000 f8ce 	bl	8001358 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_InitTick+0x64>)
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e000      	b.n	80011c8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	0018      	movs	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b003      	add	sp, #12
 80011ce:	bd90      	pop	{r4, r7, pc}
 80011d0:	20000004 	.word	0x20000004
 80011d4:	2000000c 	.word	0x2000000c
 80011d8:	20000008 	.word	0x20000008

080011dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <HAL_IncTick+0x1c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	001a      	movs	r2, r3
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <HAL_IncTick+0x20>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	18d2      	adds	r2, r2, r3
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <HAL_IncTick+0x20>)
 80011ee:	601a      	str	r2, [r3, #0]
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	2000000c 	.word	0x2000000c
 80011fc:	2000006c 	.word	0x2000006c

08001200 <__NVIC_EnableIRQ>:
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	0002      	movs	r2, r0
 8001208:	1dfb      	adds	r3, r7, #7
 800120a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800120c:	1dfb      	adds	r3, r7, #7
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b7f      	cmp	r3, #127	; 0x7f
 8001212:	d809      	bhi.n	8001228 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001214:	1dfb      	adds	r3, r7, #7
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	001a      	movs	r2, r3
 800121a:	231f      	movs	r3, #31
 800121c:	401a      	ands	r2, r3
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <__NVIC_EnableIRQ+0x30>)
 8001220:	2101      	movs	r1, #1
 8001222:	4091      	lsls	r1, r2
 8001224:	000a      	movs	r2, r1
 8001226:	601a      	str	r2, [r3, #0]
}
 8001228:	46c0      	nop			; (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	b002      	add	sp, #8
 800122e:	bd80      	pop	{r7, pc}
 8001230:	e000e100 	.word	0xe000e100

08001234 <__NVIC_SetPriority>:
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	0002      	movs	r2, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	1dfb      	adds	r3, r7, #7
 8001240:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b7f      	cmp	r3, #127	; 0x7f
 8001248:	d828      	bhi.n	800129c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800124a:	4a2f      	ldr	r2, [pc, #188]	; (8001308 <__NVIC_SetPriority+0xd4>)
 800124c:	1dfb      	adds	r3, r7, #7
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b25b      	sxtb	r3, r3
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	33c0      	adds	r3, #192	; 0xc0
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	589b      	ldr	r3, [r3, r2]
 800125a:	1dfa      	adds	r2, r7, #7
 800125c:	7812      	ldrb	r2, [r2, #0]
 800125e:	0011      	movs	r1, r2
 8001260:	2203      	movs	r2, #3
 8001262:	400a      	ands	r2, r1
 8001264:	00d2      	lsls	r2, r2, #3
 8001266:	21ff      	movs	r1, #255	; 0xff
 8001268:	4091      	lsls	r1, r2
 800126a:	000a      	movs	r2, r1
 800126c:	43d2      	mvns	r2, r2
 800126e:	401a      	ands	r2, r3
 8001270:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	019b      	lsls	r3, r3, #6
 8001276:	22ff      	movs	r2, #255	; 0xff
 8001278:	401a      	ands	r2, r3
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	0018      	movs	r0, r3
 8001280:	2303      	movs	r3, #3
 8001282:	4003      	ands	r3, r0
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001288:	481f      	ldr	r0, [pc, #124]	; (8001308 <__NVIC_SetPriority+0xd4>)
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b25b      	sxtb	r3, r3
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	430a      	orrs	r2, r1
 8001294:	33c0      	adds	r3, #192	; 0xc0
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	501a      	str	r2, [r3, r0]
}
 800129a:	e031      	b.n	8001300 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800129c:	4a1b      	ldr	r2, [pc, #108]	; (800130c <__NVIC_SetPriority+0xd8>)
 800129e:	1dfb      	adds	r3, r7, #7
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	0019      	movs	r1, r3
 80012a4:	230f      	movs	r3, #15
 80012a6:	400b      	ands	r3, r1
 80012a8:	3b08      	subs	r3, #8
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3306      	adds	r3, #6
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	18d3      	adds	r3, r2, r3
 80012b2:	3304      	adds	r3, #4
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	1dfa      	adds	r2, r7, #7
 80012b8:	7812      	ldrb	r2, [r2, #0]
 80012ba:	0011      	movs	r1, r2
 80012bc:	2203      	movs	r2, #3
 80012be:	400a      	ands	r2, r1
 80012c0:	00d2      	lsls	r2, r2, #3
 80012c2:	21ff      	movs	r1, #255	; 0xff
 80012c4:	4091      	lsls	r1, r2
 80012c6:	000a      	movs	r2, r1
 80012c8:	43d2      	mvns	r2, r2
 80012ca:	401a      	ands	r2, r3
 80012cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	019b      	lsls	r3, r3, #6
 80012d2:	22ff      	movs	r2, #255	; 0xff
 80012d4:	401a      	ands	r2, r3
 80012d6:	1dfb      	adds	r3, r7, #7
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	0018      	movs	r0, r3
 80012dc:	2303      	movs	r3, #3
 80012de:	4003      	ands	r3, r0
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012e4:	4809      	ldr	r0, [pc, #36]	; (800130c <__NVIC_SetPriority+0xd8>)
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	001c      	movs	r4, r3
 80012ec:	230f      	movs	r3, #15
 80012ee:	4023      	ands	r3, r4
 80012f0:	3b08      	subs	r3, #8
 80012f2:	089b      	lsrs	r3, r3, #2
 80012f4:	430a      	orrs	r2, r1
 80012f6:	3306      	adds	r3, #6
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	18c3      	adds	r3, r0, r3
 80012fc:	3304      	adds	r3, #4
 80012fe:	601a      	str	r2, [r3, #0]
}
 8001300:	46c0      	nop			; (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	b003      	add	sp, #12
 8001306:	bd90      	pop	{r4, r7, pc}
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	1e5a      	subs	r2, r3, #1
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	045b      	lsls	r3, r3, #17
 8001320:	429a      	cmp	r2, r3
 8001322:	d301      	bcc.n	8001328 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001324:	2301      	movs	r3, #1
 8001326:	e010      	b.n	800134a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <SysTick_Config+0x44>)
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	3a01      	subs	r2, #1
 800132e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001330:	2301      	movs	r3, #1
 8001332:	425b      	negs	r3, r3
 8001334:	2103      	movs	r1, #3
 8001336:	0018      	movs	r0, r3
 8001338:	f7ff ff7c 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <SysTick_Config+0x44>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SysTick_Config+0x44>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001348:	2300      	movs	r3, #0
}
 800134a:	0018      	movs	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	b002      	add	sp, #8
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	e000e010 	.word	0xe000e010

08001358 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	210f      	movs	r1, #15
 8001364:	187b      	adds	r3, r7, r1
 8001366:	1c02      	adds	r2, r0, #0
 8001368:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	187b      	adds	r3, r7, r1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b25b      	sxtb	r3, r3
 8001372:	0011      	movs	r1, r2
 8001374:	0018      	movs	r0, r3
 8001376:	f7ff ff5d 	bl	8001234 <__NVIC_SetPriority>
}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	46bd      	mov	sp, r7
 800137e:	b004      	add	sp, #16
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	0002      	movs	r2, r0
 800138a:	1dfb      	adds	r3, r7, #7
 800138c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b25b      	sxtb	r3, r3
 8001394:	0018      	movs	r0, r3
 8001396:	f7ff ff33 	bl	8001200 <__NVIC_EnableIRQ>
}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	46bd      	mov	sp, r7
 800139e:	b002      	add	sp, #8
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	0018      	movs	r0, r3
 80013ae:	f7ff ffaf 	bl	8001310 <SysTick_Config>
 80013b2:	0003      	movs	r3, r0
}
 80013b4:	0018      	movs	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b002      	add	sp, #8
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e032      	b.n	8001434 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2239      	movs	r2, #57	; 0x39
 80013d2:	5c9b      	ldrb	r3, [r3, r2]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d107      	bne.n	80013ea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2238      	movs	r2, #56	; 0x38
 80013de:	2100      	movs	r1, #0
 80013e0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7ff fe15 	bl	8001014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2239      	movs	r2, #57	; 0x39
 80013ee:	2102      	movs	r1, #2
 80013f0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3304      	adds	r3, #4
 80013fa:	0019      	movs	r1, r3
 80013fc:	0010      	movs	r0, r2
 80013fe:	f000 fa01 	bl	8001804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	223e      	movs	r2, #62	; 0x3e
 8001406:	2101      	movs	r1, #1
 8001408:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	223a      	movs	r2, #58	; 0x3a
 800140e:	2101      	movs	r1, #1
 8001410:	5499      	strb	r1, [r3, r2]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	223b      	movs	r2, #59	; 0x3b
 8001416:	2101      	movs	r1, #1
 8001418:	5499      	strb	r1, [r3, r2]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	223c      	movs	r2, #60	; 0x3c
 800141e:	2101      	movs	r1, #1
 8001420:	5499      	strb	r1, [r3, r2]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	223d      	movs	r2, #61	; 0x3d
 8001426:	2101      	movs	r1, #1
 8001428:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2239      	movs	r2, #57	; 0x39
 800142e:	2101      	movs	r1, #1
 8001430:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	b002      	add	sp, #8
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	2202      	movs	r2, #2
 800144c:	4013      	ands	r3, r2
 800144e:	2b02      	cmp	r3, #2
 8001450:	d124      	bne.n	800149c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	2202      	movs	r2, #2
 800145a:	4013      	ands	r3, r2
 800145c:	2b02      	cmp	r3, #2
 800145e:	d11d      	bne.n	800149c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2203      	movs	r2, #3
 8001466:	4252      	negs	r2, r2
 8001468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	2203      	movs	r2, #3
 8001478:	4013      	ands	r3, r2
 800147a:	d004      	beq.n	8001486 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	0018      	movs	r0, r3
 8001480:	f000 f9a8 	bl	80017d4 <HAL_TIM_IC_CaptureCallback>
 8001484:	e007      	b.n	8001496 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	0018      	movs	r0, r3
 800148a:	f000 f99b 	bl	80017c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	0018      	movs	r0, r3
 8001492:	f000 f9a7 	bl	80017e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	2204      	movs	r2, #4
 80014a4:	4013      	ands	r3, r2
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	d125      	bne.n	80014f6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2204      	movs	r2, #4
 80014b2:	4013      	ands	r3, r2
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d11e      	bne.n	80014f6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2205      	movs	r2, #5
 80014be:	4252      	negs	r2, r2
 80014c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2202      	movs	r2, #2
 80014c6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	699a      	ldr	r2, [r3, #24]
 80014ce:	23c0      	movs	r3, #192	; 0xc0
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4013      	ands	r3, r2
 80014d4:	d004      	beq.n	80014e0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	0018      	movs	r0, r3
 80014da:	f000 f97b 	bl	80017d4 <HAL_TIM_IC_CaptureCallback>
 80014de:	e007      	b.n	80014f0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	0018      	movs	r0, r3
 80014e4:	f000 f96e 	bl	80017c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	0018      	movs	r0, r3
 80014ec:	f000 f97a 	bl	80017e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	2208      	movs	r2, #8
 80014fe:	4013      	ands	r3, r2
 8001500:	2b08      	cmp	r3, #8
 8001502:	d124      	bne.n	800154e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	2208      	movs	r2, #8
 800150c:	4013      	ands	r3, r2
 800150e:	2b08      	cmp	r3, #8
 8001510:	d11d      	bne.n	800154e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2209      	movs	r2, #9
 8001518:	4252      	negs	r2, r2
 800151a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2204      	movs	r2, #4
 8001520:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	2203      	movs	r2, #3
 800152a:	4013      	ands	r3, r2
 800152c:	d004      	beq.n	8001538 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	0018      	movs	r0, r3
 8001532:	f000 f94f 	bl	80017d4 <HAL_TIM_IC_CaptureCallback>
 8001536:	e007      	b.n	8001548 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	0018      	movs	r0, r3
 800153c:	f000 f942 	bl	80017c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	0018      	movs	r0, r3
 8001544:	f000 f94e 	bl	80017e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	2210      	movs	r2, #16
 8001556:	4013      	ands	r3, r2
 8001558:	2b10      	cmp	r3, #16
 800155a:	d125      	bne.n	80015a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	2210      	movs	r2, #16
 8001564:	4013      	ands	r3, r2
 8001566:	2b10      	cmp	r3, #16
 8001568:	d11e      	bne.n	80015a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2211      	movs	r2, #17
 8001570:	4252      	negs	r2, r2
 8001572:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2208      	movs	r2, #8
 8001578:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	69da      	ldr	r2, [r3, #28]
 8001580:	23c0      	movs	r3, #192	; 0xc0
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4013      	ands	r3, r2
 8001586:	d004      	beq.n	8001592 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	0018      	movs	r0, r3
 800158c:	f000 f922 	bl	80017d4 <HAL_TIM_IC_CaptureCallback>
 8001590:	e007      	b.n	80015a2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	0018      	movs	r0, r3
 8001596:	f000 f915 	bl	80017c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	0018      	movs	r0, r3
 800159e:	f000 f921 	bl	80017e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	2201      	movs	r2, #1
 80015b0:	4013      	ands	r3, r2
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d10f      	bne.n	80015d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2201      	movs	r2, #1
 80015be:	4013      	ands	r3, r2
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d108      	bne.n	80015d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2202      	movs	r2, #2
 80015ca:	4252      	negs	r2, r2
 80015cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	0018      	movs	r0, r3
 80015d2:	f000 f8ef 	bl	80017b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	2240      	movs	r2, #64	; 0x40
 80015de:	4013      	ands	r3, r2
 80015e0:	2b40      	cmp	r3, #64	; 0x40
 80015e2:	d10f      	bne.n	8001604 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2240      	movs	r2, #64	; 0x40
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b40      	cmp	r3, #64	; 0x40
 80015f0:	d108      	bne.n	8001604 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2241      	movs	r2, #65	; 0x41
 80015f8:	4252      	negs	r2, r2
 80015fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	0018      	movs	r0, r3
 8001600:	f000 f8f8 	bl	80017f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001604:	46c0      	nop			; (mov r8, r8)
 8001606:	46bd      	mov	sp, r7
 8001608:	b002      	add	sp, #8
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001616:	230f      	movs	r3, #15
 8001618:	18fb      	adds	r3, r7, r3
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2238      	movs	r2, #56	; 0x38
 8001622:	5c9b      	ldrb	r3, [r3, r2]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_TIM_ConfigClockSource+0x20>
 8001628:	2302      	movs	r3, #2
 800162a:	e0bc      	b.n	80017a6 <HAL_TIM_ConfigClockSource+0x19a>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2238      	movs	r2, #56	; 0x38
 8001630:	2101      	movs	r1, #1
 8001632:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2239      	movs	r2, #57	; 0x39
 8001638:	2102      	movs	r1, #2
 800163a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	2277      	movs	r2, #119	; 0x77
 8001648:	4393      	bics	r3, r2
 800164a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	4a58      	ldr	r2, [pc, #352]	; (80017b0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2280      	movs	r2, #128	; 0x80
 8001662:	0192      	lsls	r2, r2, #6
 8001664:	4293      	cmp	r3, r2
 8001666:	d040      	beq.n	80016ea <HAL_TIM_ConfigClockSource+0xde>
 8001668:	2280      	movs	r2, #128	; 0x80
 800166a:	0192      	lsls	r2, r2, #6
 800166c:	4293      	cmp	r3, r2
 800166e:	d900      	bls.n	8001672 <HAL_TIM_ConfigClockSource+0x66>
 8001670:	e088      	b.n	8001784 <HAL_TIM_ConfigClockSource+0x178>
 8001672:	2280      	movs	r2, #128	; 0x80
 8001674:	0152      	lsls	r2, r2, #5
 8001676:	4293      	cmp	r3, r2
 8001678:	d100      	bne.n	800167c <HAL_TIM_ConfigClockSource+0x70>
 800167a:	e088      	b.n	800178e <HAL_TIM_ConfigClockSource+0x182>
 800167c:	2280      	movs	r2, #128	; 0x80
 800167e:	0152      	lsls	r2, r2, #5
 8001680:	4293      	cmp	r3, r2
 8001682:	d900      	bls.n	8001686 <HAL_TIM_ConfigClockSource+0x7a>
 8001684:	e07e      	b.n	8001784 <HAL_TIM_ConfigClockSource+0x178>
 8001686:	2b70      	cmp	r3, #112	; 0x70
 8001688:	d018      	beq.n	80016bc <HAL_TIM_ConfigClockSource+0xb0>
 800168a:	d900      	bls.n	800168e <HAL_TIM_ConfigClockSource+0x82>
 800168c:	e07a      	b.n	8001784 <HAL_TIM_ConfigClockSource+0x178>
 800168e:	2b60      	cmp	r3, #96	; 0x60
 8001690:	d04f      	beq.n	8001732 <HAL_TIM_ConfigClockSource+0x126>
 8001692:	d900      	bls.n	8001696 <HAL_TIM_ConfigClockSource+0x8a>
 8001694:	e076      	b.n	8001784 <HAL_TIM_ConfigClockSource+0x178>
 8001696:	2b50      	cmp	r3, #80	; 0x50
 8001698:	d03b      	beq.n	8001712 <HAL_TIM_ConfigClockSource+0x106>
 800169a:	d900      	bls.n	800169e <HAL_TIM_ConfigClockSource+0x92>
 800169c:	e072      	b.n	8001784 <HAL_TIM_ConfigClockSource+0x178>
 800169e:	2b40      	cmp	r3, #64	; 0x40
 80016a0:	d057      	beq.n	8001752 <HAL_TIM_ConfigClockSource+0x146>
 80016a2:	d900      	bls.n	80016a6 <HAL_TIM_ConfigClockSource+0x9a>
 80016a4:	e06e      	b.n	8001784 <HAL_TIM_ConfigClockSource+0x178>
 80016a6:	2b30      	cmp	r3, #48	; 0x30
 80016a8:	d063      	beq.n	8001772 <HAL_TIM_ConfigClockSource+0x166>
 80016aa:	d86b      	bhi.n	8001784 <HAL_TIM_ConfigClockSource+0x178>
 80016ac:	2b20      	cmp	r3, #32
 80016ae:	d060      	beq.n	8001772 <HAL_TIM_ConfigClockSource+0x166>
 80016b0:	d868      	bhi.n	8001784 <HAL_TIM_ConfigClockSource+0x178>
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d05d      	beq.n	8001772 <HAL_TIM_ConfigClockSource+0x166>
 80016b6:	2b10      	cmp	r3, #16
 80016b8:	d05b      	beq.n	8001772 <HAL_TIM_ConfigClockSource+0x166>
 80016ba:	e063      	b.n	8001784 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	6899      	ldr	r1, [r3, #8]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f000 f95e 	bl	800198c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2277      	movs	r2, #119	; 0x77
 80016dc:	4313      	orrs	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68ba      	ldr	r2, [r7, #8]
 80016e6:	609a      	str	r2, [r3, #8]
      break;
 80016e8:	e052      	b.n	8001790 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	6899      	ldr	r1, [r3, #8]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	f000 f947 	bl	800198c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2180      	movs	r1, #128	; 0x80
 800170a:	01c9      	lsls	r1, r1, #7
 800170c:	430a      	orrs	r2, r1
 800170e:	609a      	str	r2, [r3, #8]
      break;
 8001710:	e03e      	b.n	8001790 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6818      	ldr	r0, [r3, #0]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	6859      	ldr	r1, [r3, #4]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	001a      	movs	r2, r3
 8001720:	f000 f8ba 	bl	8001898 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2150      	movs	r1, #80	; 0x50
 800172a:	0018      	movs	r0, r3
 800172c:	f000 f914 	bl	8001958 <TIM_ITRx_SetConfig>
      break;
 8001730:	e02e      	b.n	8001790 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	6859      	ldr	r1, [r3, #4]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	001a      	movs	r2, r3
 8001740:	f000 f8d8 	bl	80018f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2160      	movs	r1, #96	; 0x60
 800174a:	0018      	movs	r0, r3
 800174c:	f000 f904 	bl	8001958 <TIM_ITRx_SetConfig>
      break;
 8001750:	e01e      	b.n	8001790 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	6859      	ldr	r1, [r3, #4]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	001a      	movs	r2, r3
 8001760:	f000 f89a 	bl	8001898 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2140      	movs	r1, #64	; 0x40
 800176a:	0018      	movs	r0, r3
 800176c:	f000 f8f4 	bl	8001958 <TIM_ITRx_SetConfig>
      break;
 8001770:	e00e      	b.n	8001790 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	0019      	movs	r1, r3
 800177c:	0010      	movs	r0, r2
 800177e:	f000 f8eb 	bl	8001958 <TIM_ITRx_SetConfig>
      break;
 8001782:	e005      	b.n	8001790 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001784:	230f      	movs	r3, #15
 8001786:	18fb      	adds	r3, r7, r3
 8001788:	2201      	movs	r2, #1
 800178a:	701a      	strb	r2, [r3, #0]
      break;
 800178c:	e000      	b.n	8001790 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800178e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2239      	movs	r2, #57	; 0x39
 8001794:	2101      	movs	r1, #1
 8001796:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2238      	movs	r2, #56	; 0x38
 800179c:	2100      	movs	r1, #0
 800179e:	5499      	strb	r1, [r3, r2]

  return status;
 80017a0:	230f      	movs	r3, #15
 80017a2:	18fb      	adds	r3, r7, r3
 80017a4:	781b      	ldrb	r3, [r3, #0]
}
 80017a6:	0018      	movs	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b004      	add	sp, #16
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	ffff00ff 	.word	0xffff00ff

080017b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80017bc:	46c0      	nop			; (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	b002      	add	sp, #8
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80017cc:	46c0      	nop			; (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b002      	add	sp, #8
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80017dc:	46c0      	nop			; (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	b002      	add	sp, #8
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b002      	add	sp, #8
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017fc:	46c0      	nop			; (mov r8, r8)
 80017fe:	46bd      	mov	sp, r7
 8001800:	b002      	add	sp, #8
 8001802:	bd80      	pop	{r7, pc}

08001804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	05db      	lsls	r3, r3, #23
 800181a:	429a      	cmp	r2, r3
 800181c:	d003      	beq.n	8001826 <TIM_Base_SetConfig+0x22>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a1b      	ldr	r2, [pc, #108]	; (8001890 <TIM_Base_SetConfig+0x8c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d108      	bne.n	8001838 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2270      	movs	r2, #112	; 0x70
 800182a:	4393      	bics	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	4313      	orrs	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	05db      	lsls	r3, r3, #23
 800183e:	429a      	cmp	r2, r3
 8001840:	d003      	beq.n	800184a <TIM_Base_SetConfig+0x46>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a12      	ldr	r2, [pc, #72]	; (8001890 <TIM_Base_SetConfig+0x8c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d108      	bne.n	800185c <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4a11      	ldr	r2, [pc, #68]	; (8001894 <TIM_Base_SetConfig+0x90>)
 800184e:	4013      	ands	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	4313      	orrs	r3, r2
 800185a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2280      	movs	r2, #128	; 0x80
 8001860:	4393      	bics	r3, r2
 8001862:	001a      	movs	r2, r3
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	615a      	str	r2, [r3, #20]
}
 8001888:	46c0      	nop			; (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	b004      	add	sp, #16
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40010800 	.word	0x40010800
 8001894:	fffffcff 	.word	0xfffffcff

08001898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	2201      	movs	r2, #1
 80018b0:	4393      	bics	r3, r2
 80018b2:	001a      	movs	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	22f0      	movs	r2, #240	; 0xf0
 80018c2:	4393      	bics	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	220a      	movs	r2, #10
 80018d4:	4393      	bics	r3, r2
 80018d6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	4313      	orrs	r3, r2
 80018de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	621a      	str	r2, [r3, #32]
}
 80018ec:	46c0      	nop			; (mov r8, r8)
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b006      	add	sp, #24
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	2210      	movs	r2, #16
 8001906:	4393      	bics	r3, r2
 8001908:	001a      	movs	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <TIM_TI2_ConfigInputStage+0x60>)
 800191e:	4013      	ands	r3, r2
 8001920:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	031b      	lsls	r3, r3, #12
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	4313      	orrs	r3, r2
 800192a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	22a0      	movs	r2, #160	; 0xa0
 8001930:	4393      	bics	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4313      	orrs	r3, r2
 800193c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	621a      	str	r2, [r3, #32]
}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	46bd      	mov	sp, r7
 800194e:	b006      	add	sp, #24
 8001950:	bd80      	pop	{r7, pc}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	ffff0fff 	.word	0xffff0fff

08001958 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2270      	movs	r2, #112	; 0x70
 800196c:	4393      	bics	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4313      	orrs	r3, r2
 8001976:	2207      	movs	r2, #7
 8001978:	4313      	orrs	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	609a      	str	r2, [r3, #8]
}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	46bd      	mov	sp, r7
 8001986:	b004      	add	sp, #16
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <TIM_ETR_SetConfig+0x3c>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	021a      	lsls	r2, r3, #8
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	431a      	orrs	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	609a      	str	r2, [r3, #8]
}
 80019c0:	46c0      	nop			; (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b006      	add	sp, #24
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	ffff00ff 	.word	0xffff00ff

080019cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2238      	movs	r2, #56	; 0x38
 80019da:	5c9b      	ldrb	r3, [r3, r2]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80019e0:	2302      	movs	r3, #2
 80019e2:	e03d      	b.n	8001a60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2238      	movs	r2, #56	; 0x38
 80019e8:	2101      	movs	r1, #1
 80019ea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2239      	movs	r2, #57	; 0x39
 80019f0:	2102      	movs	r1, #2
 80019f2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2270      	movs	r2, #112	; 0x70
 8001a08:	4393      	bics	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	05db      	lsls	r3, r3, #23
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d004      	beq.n	8001a34 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a0e      	ldr	r2, [pc, #56]	; (8001a68 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d10c      	bne.n	8001a4e <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	2280      	movs	r2, #128	; 0x80
 8001a38:	4393      	bics	r3, r2
 8001a3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2239      	movs	r2, #57	; 0x39
 8001a52:	2101      	movs	r1, #1
 8001a54:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2238      	movs	r2, #56	; 0x38
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	0018      	movs	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b004      	add	sp, #16
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40010800 	.word	0x40010800

08001a6c <LL_ADC_IsEnabled>:
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	425a      	negs	r2, r3
 8001a80:	4153      	adcs	r3, r2
 8001a82:	b2db      	uxtb	r3, r3
}
 8001a84:	0018      	movs	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b002      	add	sp, #8
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001a96:	230f      	movs	r3, #15
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0U)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f7ff ffe3 	bl	8001a6c <LL_ADC_IsEnabled>
 8001aa6:	1e03      	subs	r3, r0, #0
 8001aa8:	d118      	bne.n	8001adc <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	4a11      	ldr	r2, [pc, #68]	; (8001af4 <LL_ADC_Init+0x68>)
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	6859      	ldr	r1, [r3, #4]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	4319      	orrs	r1, r3
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	430b      	orrs	r3, r1
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	60da      	str	r2, [r3, #12]
               ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	089a      	lsrs	r2, r3, #2
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	611a      	str	r2, [r3, #16]
 8001ada:	e003      	b.n	8001ae4 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001adc:	230f      	movs	r3, #15
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001ae4:	230f      	movs	r3, #15
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	781b      	ldrb	r3, [r3, #0]
}
 8001aea:	0018      	movs	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	b004      	add	sp, #16
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	ffff3fc7 	.word	0xffff3fc7

08001af8 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001b02:	230f      	movs	r3, #15
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0U)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f7ff ffad 	bl	8001a6c <LL_ADC_IsEnabled>
 8001b12:	1e03      	subs	r3, r0, #0
 8001b14:	d115      	bne.n	8001b42 <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	4a0f      	ldr	r2, [pc, #60]	; (8001b58 <LL_ADC_REG_Init+0x60>)
 8001b1c:	401a      	ands	r2, r3
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	6819      	ldr	r1, [r3, #0]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4319      	orrs	r1, r3
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	4319      	orrs	r1, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	4319      	orrs	r1, r3
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	e003      	b.n	8001b4a <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001b42:	230f      	movs	r3, #15
 8001b44:	18fb      	adds	r3, r7, r3
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001b4a:	230f      	movs	r3, #15
 8001b4c:	18fb      	adds	r3, r7, r3
 8001b4e:	781b      	ldrb	r3, [r3, #0]
}
 8001b50:	0018      	movs	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b004      	add	sp, #16
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	fffec23c 	.word	0xfffec23c

08001b5c <LL_GPIO_SetPinMode>:
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6819      	ldr	r1, [r3, #0]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	435b      	muls	r3, r3
 8001b70:	001a      	movs	r2, r3
 8001b72:	0013      	movs	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	189b      	adds	r3, r3, r2
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	400b      	ands	r3, r1
 8001b7c:	001a      	movs	r2, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	435b      	muls	r3, r3
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	434b      	muls	r3, r1
 8001b86:	431a      	orrs	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	601a      	str	r2, [r3, #0]
}
 8001b8c:	46c0      	nop			; (mov r8, r8)
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b004      	add	sp, #16
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <LL_GPIO_SetPinOutputType>:
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	43d2      	mvns	r2, r2
 8001ba8:	401a      	ands	r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	434b      	muls	r3, r1
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	605a      	str	r2, [r3, #4]
}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b004      	add	sp, #16
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <LL_GPIO_SetPinSpeed>:
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6899      	ldr	r1, [r3, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	435b      	muls	r3, r3
 8001bd2:	001a      	movs	r2, r3
 8001bd4:	0013      	movs	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	189b      	adds	r3, r3, r2
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	400b      	ands	r3, r1
 8001bde:	001a      	movs	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	435b      	muls	r3, r3
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	434b      	muls	r3, r1
 8001be8:	431a      	orrs	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	609a      	str	r2, [r3, #8]
}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b004      	add	sp, #16
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <LL_GPIO_SetPinPull>:
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	68d9      	ldr	r1, [r3, #12]
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	435b      	muls	r3, r3
 8001c0a:	001a      	movs	r2, r3
 8001c0c:	0013      	movs	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	189b      	adds	r3, r3, r2
 8001c12:	43db      	mvns	r3, r3
 8001c14:	400b      	ands	r3, r1
 8001c16:	001a      	movs	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	435b      	muls	r3, r3
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	434b      	muls	r3, r1
 8001c20:	431a      	orrs	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	60da      	str	r2, [r3, #12]
}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	b004      	add	sp, #16
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <LL_GPIO_SetAFPin_0_7>:
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6a19      	ldr	r1, [r3, #32]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	435b      	muls	r3, r3
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	4353      	muls	r3, r2
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	435a      	muls	r2, r3
 8001c4a:	0013      	movs	r3, r2
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	1a9b      	subs	r3, r3, r2
 8001c50:	43db      	mvns	r3, r3
 8001c52:	400b      	ands	r3, r1
 8001c54:	001a      	movs	r2, r3
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	435b      	muls	r3, r3
 8001c5a:	68b9      	ldr	r1, [r7, #8]
 8001c5c:	434b      	muls	r3, r1
 8001c5e:	68b9      	ldr	r1, [r7, #8]
 8001c60:	434b      	muls	r3, r1
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	434b      	muls	r3, r1
 8001c66:	431a      	orrs	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	621a      	str	r2, [r3, #32]
}
 8001c6c:	46c0      	nop			; (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b004      	add	sp, #16
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <LL_GPIO_SetAFPin_8_15>:
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	0a1b      	lsrs	r3, r3, #8
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	0a12      	lsrs	r2, r2, #8
 8001c8c:	4353      	muls	r3, r2
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	0a12      	lsrs	r2, r2, #8
 8001c92:	4353      	muls	r3, r2
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	0a12      	lsrs	r2, r2, #8
 8001c98:	435a      	muls	r2, r3
 8001c9a:	0013      	movs	r3, r2
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	1a9b      	subs	r3, r3, r2
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	400b      	ands	r3, r1
 8001ca4:	001a      	movs	r2, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	68b9      	ldr	r1, [r7, #8]
 8001cac:	0a09      	lsrs	r1, r1, #8
 8001cae:	434b      	muls	r3, r1
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	0a09      	lsrs	r1, r1, #8
 8001cb4:	434b      	muls	r3, r1
 8001cb6:	68b9      	ldr	r1, [r7, #8]
 8001cb8:	0a09      	lsrs	r1, r1, #8
 8001cba:	434b      	muls	r3, r1
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	434b      	muls	r3, r1
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b004      	add	sp, #16
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b084      	sub	sp, #16
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001ce0:	e048      	b.n	8001d74 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	4091      	lsls	r1, r2
 8001cec:	000a      	movs	r2, r1
 8001cee:	4013      	ands	r3, r2
 8001cf0:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d03a      	beq.n	8001d6e <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d003      	beq.n	8001d08 <LL_GPIO_Init+0x3a>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d10e      	bne.n	8001d26 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	0018      	movs	r0, r3
 8001d12:	f7ff ff54 	bl	8001bbe <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	6819      	ldr	r1, [r3, #0]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f7ff ff37 	bl	8001b94 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	68b9      	ldr	r1, [r7, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f7ff ff61 	bl	8001bf6 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d111      	bne.n	8001d60 <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2bff      	cmp	r3, #255	; 0xff
 8001d40:	d807      	bhi.n	8001d52 <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	695a      	ldr	r2, [r3, #20]
 8001d46:	68b9      	ldr	r1, [r7, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f7ff ff6f 	bl	8001c2e <LL_GPIO_SetAFPin_0_7>
 8001d50:	e006      	b.n	8001d60 <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	695a      	ldr	r2, [r3, #20]
 8001d56:	68b9      	ldr	r1, [r7, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f7ff ff8a 	bl	8001c74 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f7ff fef7 	bl	8001b5c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3301      	adds	r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	40da      	lsrs	r2, r3
 8001d7c:	1e13      	subs	r3, r2, #0
 8001d7e:	d1b0      	bne.n	8001ce2 <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	0018      	movs	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b004      	add	sp, #16
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <LL_RCC_HSI_IsReady>:
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <LL_RCC_HSI_IsReady+0x1c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2204      	movs	r2, #4
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d101      	bne.n	8001da0 <LL_RCC_HSI_IsReady+0x14>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <LL_RCC_HSI_IsReady+0x16>
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	0018      	movs	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000

08001dac <LL_RCC_LSE_IsReady>:
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8001db0:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <LL_RCC_LSE_IsReady+0x24>)
 8001db2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	401a      	ands	r2, r3
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d101      	bne.n	8001dc6 <LL_RCC_LSE_IsReady+0x1a>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <LL_RCC_LSE_IsReady+0x1c>
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	0018      	movs	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <LL_RCC_MSI_GetRange>:
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <LL_RCC_MSI_GetRange+0x14>)
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	23e0      	movs	r3, #224	; 0xe0
 8001dde:	021b      	lsls	r3, r3, #8
 8001de0:	4013      	ands	r3, r2
}
 8001de2:	0018      	movs	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000

08001dec <LL_RCC_GetSysClkSource>:
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <LL_RCC_GetSysClkSource+0x14>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	220c      	movs	r2, #12
 8001df6:	4013      	ands	r3, r2
}
 8001df8:	0018      	movs	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	40021000 	.word	0x40021000

08001e04 <LL_RCC_GetAHBPrescaler>:
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001e08:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <LL_RCC_GetAHBPrescaler+0x14>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	22f0      	movs	r2, #240	; 0xf0
 8001e0e:	4013      	ands	r3, r2
}
 8001e10:	0018      	movs	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	40021000 	.word	0x40021000

08001e1c <LL_RCC_GetAPB1Prescaler>:
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	23e0      	movs	r3, #224	; 0xe0
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4013      	ands	r3, r2
}
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40021000 	.word	0x40021000

08001e34 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <LL_RCC_GetUSARTClockSource+0x20>)
 8001e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	401a      	ands	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	041b      	lsls	r3, r3, #16
 8001e48:	4313      	orrs	r3, r2
}
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b002      	add	sp, #8
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	40021000 	.word	0x40021000

08001e58 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <LL_RCC_PLL_GetMainSource+0x14>)
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	025b      	lsls	r3, r3, #9
 8001e64:	4013      	ands	r3, r2
}
 8001e66:	0018      	movs	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000

08001e70 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	23f0      	movs	r3, #240	; 0xf0
 8001e7a:	039b      	lsls	r3, r3, #14
 8001e7c:	4013      	ands	r3, r2
}
 8001e7e:	0018      	movs	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000

08001e88 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <LL_RCC_PLL_GetDivider+0x14>)
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	23c0      	movs	r3, #192	; 0xc0
 8001e92:	041b      	lsls	r3, r3, #16
 8001e94:	4013      	ands	r3, r2
}
 8001e96:	0018      	movs	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000

08001ea0 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b10      	cmp	r3, #16
 8001eae:	d101      	bne.n	8001eb4 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e000      	b.n	8001eb6 <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000

08001ec0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
    }
  }
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b0c      	cmp	r3, #12
 8001ed0:	d139      	bne.n	8001f46 <LL_RCC_GetUSARTClockFreq+0x86>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f7ff ffad 	bl	8001e34 <LL_RCC_GetUSARTClockSource>
 8001eda:	0003      	movs	r3, r0
 8001edc:	4a1f      	ldr	r2, [pc, #124]	; (8001f5c <LL_RCC_GetUSARTClockFreq+0x9c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d01c      	beq.n	8001f1c <LL_RCC_GetUSARTClockFreq+0x5c>
 8001ee2:	4a1e      	ldr	r2, [pc, #120]	; (8001f5c <LL_RCC_GetUSARTClockFreq+0x9c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d821      	bhi.n	8001f2c <LL_RCC_GetUSARTClockFreq+0x6c>
 8001ee8:	4a1d      	ldr	r2, [pc, #116]	; (8001f60 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d003      	beq.n	8001ef6 <LL_RCC_GetUSARTClockFreq+0x36>
 8001eee:	4a1d      	ldr	r2, [pc, #116]	; (8001f64 <LL_RCC_GetUSARTClockFreq+0xa4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d005      	beq.n	8001f00 <LL_RCC_GetUSARTClockFreq+0x40>
 8001ef4:	e01a      	b.n	8001f2c <LL_RCC_GetUSARTClockFreq+0x6c>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001ef6:	f000 f83b 	bl	8001f70 <RCC_GetSystemClockFreq>
 8001efa:	0003      	movs	r3, r0
 8001efc:	60fb      	str	r3, [r7, #12]
        break;
 8001efe:	e027      	b.n	8001f50 <LL_RCC_GetUSARTClockFreq+0x90>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001f00:	f7ff ff44 	bl	8001d8c <LL_RCC_HSI_IsReady>
 8001f04:	1e03      	subs	r3, r0, #0
 8001f06:	d020      	beq.n	8001f4a <LL_RCC_GetUSARTClockFreq+0x8a>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001f08:	f7ff ffca 	bl	8001ea0 <LL_RCC_IsActiveFlag_HSIDIV>
 8001f0c:	1e03      	subs	r3, r0, #0
 8001f0e:	d002      	beq.n	8001f16 <LL_RCC_GetUSARTClockFreq+0x56>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8001f10:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <LL_RCC_GetUSARTClockFreq+0xa8>)
 8001f12:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8001f14:	e019      	b.n	8001f4a <LL_RCC_GetUSARTClockFreq+0x8a>
            usart_frequency = HSI_VALUE;
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <LL_RCC_GetUSARTClockFreq+0xac>)
 8001f18:	60fb      	str	r3, [r7, #12]
        break;
 8001f1a:	e016      	b.n	8001f4a <LL_RCC_GetUSARTClockFreq+0x8a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001f1c:	f7ff ff46 	bl	8001dac <LL_RCC_LSE_IsReady>
 8001f20:	1e03      	subs	r3, r0, #0
 8001f22:	d014      	beq.n	8001f4e <LL_RCC_GetUSARTClockFreq+0x8e>
        {
          usart_frequency = LSE_VALUE;
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	021b      	lsls	r3, r3, #8
 8001f28:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001f2a:	e010      	b.n	8001f4e <LL_RCC_GetUSARTClockFreq+0x8e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001f2c:	f000 f820 	bl	8001f70 <RCC_GetSystemClockFreq>
 8001f30:	0003      	movs	r3, r0
 8001f32:	0018      	movs	r0, r3
 8001f34:	f000 f860 	bl	8001ff8 <RCC_GetHCLKClockFreq>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f000 f872 	bl	8002024 <RCC_GetPCLK1ClockFreq>
 8001f40:	0003      	movs	r3, r0
 8001f42:	60fb      	str	r3, [r7, #12]
        break;
 8001f44:	e004      	b.n	8001f50 <LL_RCC_GetUSARTClockFreq+0x90>
    }
  }
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	e002      	b.n	8001f50 <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	e000      	b.n	8001f50 <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 8001f4e:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 8001f50:	68fb      	ldr	r3, [r7, #12]
}
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b004      	add	sp, #16
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	000c000c 	.word	0x000c000c
 8001f60:	000c0004 	.word	0x000c0004
 8001f64:	000c0008 	.word	0x000c0008
 8001f68:	003d0900 	.word	0x003d0900
 8001f6c:	00f42400 	.word	0x00f42400

08001f70 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001f76:	f7ff ff39 	bl	8001dec <LL_RCC_GetSysClkSource>
 8001f7a:	0003      	movs	r3, r0
 8001f7c:	2b0c      	cmp	r3, #12
 8001f7e:	d020      	beq.n	8001fc2 <RCC_GetSystemClockFreq+0x52>
 8001f80:	d824      	bhi.n	8001fcc <RCC_GetSystemClockFreq+0x5c>
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d01a      	beq.n	8001fbc <RCC_GetSystemClockFreq+0x4c>
 8001f86:	d821      	bhi.n	8001fcc <RCC_GetSystemClockFreq+0x5c>
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <RCC_GetSystemClockFreq+0x22>
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d00b      	beq.n	8001fa8 <RCC_GetSystemClockFreq+0x38>
 8001f90:	e01c      	b.n	8001fcc <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001f92:	f7ff ff1f 	bl	8001dd4 <LL_RCC_MSI_GetRange>
 8001f96:	0003      	movs	r3, r0
 8001f98:	0b5b      	lsrs	r3, r3, #13
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	2280      	movs	r2, #128	; 0x80
 8001f9e:	0212      	lsls	r2, r2, #8
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	0013      	movs	r3, r2
 8001fa4:	607b      	str	r3, [r7, #4]
      break;
 8001fa6:	e01c      	b.n	8001fe2 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001fa8:	f7ff ff7a 	bl	8001ea0 <LL_RCC_IsActiveFlag_HSIDIV>
 8001fac:	1e03      	subs	r3, r0, #0
 8001fae:	d002      	beq.n	8001fb6 <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <RCC_GetSystemClockFreq+0x7c>)
 8001fb2:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8001fb4:	e015      	b.n	8001fe2 <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <RCC_GetSystemClockFreq+0x80>)
 8001fb8:	607b      	str	r3, [r7, #4]
      break;
 8001fba:	e012      	b.n	8001fe2 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <RCC_GetSystemClockFreq+0x84>)
 8001fbe:	607b      	str	r3, [r7, #4]
      break;
 8001fc0:	e00f      	b.n	8001fe2 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001fc2:	f000 f843 	bl	800204c <RCC_PLL_GetFreqDomain_SYS>
 8001fc6:	0003      	movs	r3, r0
 8001fc8:	607b      	str	r3, [r7, #4]
      break;
 8001fca:	e00a      	b.n	8001fe2 <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001fcc:	f7ff ff02 	bl	8001dd4 <LL_RCC_MSI_GetRange>
 8001fd0:	0003      	movs	r3, r0
 8001fd2:	0b5b      	lsrs	r3, r3, #13
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	2280      	movs	r2, #128	; 0x80
 8001fd8:	0212      	lsls	r2, r2, #8
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	0013      	movs	r3, r2
 8001fde:	607b      	str	r3, [r7, #4]
      break;
 8001fe0:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8001fe2:	687b      	ldr	r3, [r7, #4]
}
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	003d0900 	.word	0x003d0900
 8001ff0:	00f42400 	.word	0x00f42400
 8001ff4:	007a1200 	.word	0x007a1200

08001ff8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002000:	f7ff ff00 	bl	8001e04 <LL_RCC_GetAHBPrescaler>
 8002004:	0003      	movs	r3, r0
 8002006:	091b      	lsrs	r3, r3, #4
 8002008:	220f      	movs	r2, #15
 800200a:	4013      	ands	r3, r2
 800200c:	4a04      	ldr	r2, [pc, #16]	; (8002020 <RCC_GetHCLKClockFreq+0x28>)
 800200e:	5cd3      	ldrb	r3, [r2, r3]
 8002010:	001a      	movs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	40d3      	lsrs	r3, r2
}
 8002016:	0018      	movs	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	b002      	add	sp, #8
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	08002868 	.word	0x08002868

08002024 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800202c:	f7ff fef6 	bl	8001e1c <LL_RCC_GetAPB1Prescaler>
 8002030:	0003      	movs	r3, r0
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	4a04      	ldr	r2, [pc, #16]	; (8002048 <RCC_GetPCLK1ClockFreq+0x24>)
 8002036:	5cd3      	ldrb	r3, [r2, r3]
 8002038:	001a      	movs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	40d3      	lsrs	r3, r2
}
 800203e:	0018      	movs	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	b002      	add	sp, #8
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	08002878 	.word	0x08002878

0800204c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002052:	f7ff ff01 	bl	8001e58 <LL_RCC_PLL_GetMainSource>
 8002056:	0003      	movs	r3, r0
 8002058:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d109      	bne.n	8002074 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8002060:	f7ff ff1e 	bl	8001ea0 <LL_RCC_IsActiveFlag_HSIDIV>
 8002064:	1e03      	subs	r3, r0, #0
 8002066:	d002      	beq.n	800206e <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8002068:	4b10      	ldr	r3, [pc, #64]	; (80020ac <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800206a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 800206c:	e005      	b.n	800207a <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8002070:	607b      	str	r3, [r7, #4]
      break;
 8002072:	e002      	b.n	800207a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8002076:	607b      	str	r3, [r7, #4]
      break;
 8002078:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 800207a:	f7ff fef9 	bl	8001e70 <LL_RCC_PLL_GetMultiplicator>
 800207e:	0003      	movs	r3, r0
 8002080:	0c9b      	lsrs	r3, r3, #18
 8002082:	4a0d      	ldr	r2, [pc, #52]	; (80020b8 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8002084:	5cd3      	ldrb	r3, [r2, r3]
 8002086:	001a      	movs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4353      	muls	r3, r2
 800208c:	001c      	movs	r4, r3
 800208e:	f7ff fefb 	bl	8001e88 <LL_RCC_PLL_GetDivider>
 8002092:	0003      	movs	r3, r0
 8002094:	0d9b      	lsrs	r3, r3, #22
 8002096:	3301      	adds	r3, #1
 8002098:	0019      	movs	r1, r3
 800209a:	0020      	movs	r0, r4
 800209c:	f7fe f834 	bl	8000108 <__udivsi3>
 80020a0:	0003      	movs	r3, r0
}
 80020a2:	0018      	movs	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b003      	add	sp, #12
 80020a8:	bd90      	pop	{r4, r7, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	003d0900 	.word	0x003d0900
 80020b0:	00f42400 	.word	0x00f42400
 80020b4:	007a1200 	.word	0x007a1200
 80020b8:	08002880 	.word	0x08002880

080020bc <LL_SPI_IsEnabled>:
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2240      	movs	r2, #64	; 0x40
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b40      	cmp	r3, #64	; 0x40
 80020ce:	d101      	bne.n	80020d4 <LL_SPI_IsEnabled+0x18>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <LL_SPI_IsEnabled+0x1a>
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	0018      	movs	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	b002      	add	sp, #8
 80020dc:	bd80      	pop	{r7, pc}

080020de <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	001a      	movs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	611a      	str	r2, [r3, #16]
}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	46bd      	mov	sp, r7
 80020f6:	b002      	add	sp, #8
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002106:	230f      	movs	r3, #15
 8002108:	18fb      	adds	r3, r7, r3
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	0018      	movs	r0, r3
 8002112:	f7ff ffd3 	bl	80020bc <LL_SPI_IsEnabled>
 8002116:	1e03      	subs	r3, r0, #0
 8002118:	d13c      	bne.n	8002194 <LL_SPI_Init+0x98>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a21      	ldr	r2, [pc, #132]	; (80021a4 <LL_SPI_Init+0xa8>)
 8002120:	401a      	ands	r2, r3
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	6819      	ldr	r1, [r3, #0]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4319      	orrs	r1, r3
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	4319      	orrs	r1, r3
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	4319      	orrs	r1, r3
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	4319      	orrs	r1, r3
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	4319      	orrs	r1, r3
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	4319      	orrs	r1, r3
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	4319      	orrs	r1, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	430b      	orrs	r3, r1
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2204      	movs	r2, #4
 8002162:	4393      	bics	r3, r2
 8002164:	001a      	movs	r2, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	0c1b      	lsrs	r3, r3, #16
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	6a1a      	ldr	r2, [r3, #32]
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	019b      	lsls	r3, r3, #6
 800217a:	429a      	cmp	r2, r3
 800217c:	d106      	bne.n	800218c <LL_SPI_Init+0x90>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	0011      	movs	r1, r2
 8002186:	0018      	movs	r0, r3
 8002188:	f7ff ffa9 	bl	80020de <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800218c:	230f      	movs	r3, #15
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8002194:	230f      	movs	r3, #15
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	781b      	ldrb	r3, [r3, #0]
}
 800219a:	0018      	movs	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	b004      	add	sp, #16
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	ffff0040 	.word	0xffff0040

080021a8 <LL_TIM_SetPrescaler>:
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021b8:	46c0      	nop			; (mov r8, r8)
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b002      	add	sp, #8
 80021be:	bd80      	pop	{r7, pc}

080021c0 <LL_TIM_SetAutoReload>:
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80021d0:	46c0      	nop			; (mov r8, r8)
 80021d2:	46bd      	mov	sp, r7
 80021d4:	b002      	add	sp, #8
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <LL_TIM_OC_SetCompareCH1>:
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <LL_TIM_OC_SetCompareCH2>:
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b002      	add	sp, #8
 8002206:	bd80      	pop	{r7, pc}

08002208 <LL_TIM_OC_SetCompareCH3>:
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b002      	add	sp, #8
 800221e:	bd80      	pop	{r7, pc}

08002220 <LL_TIM_OC_SetCompareCH4>:
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002230:	46c0      	nop			; (mov r8, r8)
 8002232:	46bd      	mov	sp, r7
 8002234:	b002      	add	sp, #8
 8002236:	bd80      	pop	{r7, pc}

08002238 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	2201      	movs	r2, #1
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	615a      	str	r2, [r3, #20]
}
 800224c:	46c0      	nop			; (mov r8, r8)
 800224e:	46bd      	mov	sp, r7
 8002250:	b002      	add	sp, #8
 8002252:	bd80      	pop	{r7, pc}

08002254 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	05db      	lsls	r3, r3, #23
 800226a:	429a      	cmp	r2, r3
 800226c:	d003      	beq.n	8002276 <LL_TIM_Init+0x22>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a1a      	ldr	r2, [pc, #104]	; (80022dc <LL_TIM_Init+0x88>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d107      	bne.n	8002286 <LL_TIM_Init+0x32>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2270      	movs	r2, #112	; 0x70
 800227a:	4393      	bics	r3, r2
 800227c:	001a      	movs	r2, r3
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	05db      	lsls	r3, r3, #23
 800228c:	429a      	cmp	r2, r3
 800228e:	d003      	beq.n	8002298 <LL_TIM_Init+0x44>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a12      	ldr	r2, [pc, #72]	; (80022dc <LL_TIM_Init+0x88>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d106      	bne.n	80022a6 <LL_TIM_Init+0x52>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4a11      	ldr	r2, [pc, #68]	; (80022e0 <LL_TIM_Init+0x8c>)
 800229c:	401a      	ands	r2, r3
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	0011      	movs	r1, r2
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7ff ff83 	bl	80021c0 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	001a      	movs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	0011      	movs	r1, r2
 80022c4:	0018      	movs	r0, r3
 80022c6:	f7ff ff6f 	bl	80021a8 <LL_TIM_SetPrescaler>
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	0018      	movs	r0, r3
 80022ce:	f7ff ffb3 	bl	8002238 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	0018      	movs	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b004      	add	sp, #16
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40010800 	.word	0x40010800
 80022e0:	fffffcff 	.word	0xfffffcff

080022e4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80022f0:	2317      	movs	r3, #23
 80022f2:	18fb      	adds	r3, r7, r3
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	015b      	lsls	r3, r3, #5
 80022fe:	429a      	cmp	r2, r3
 8002300:	d036      	beq.n	8002370 <LL_TIM_OC_Init+0x8c>
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	015b      	lsls	r3, r3, #5
 8002308:	429a      	cmp	r2, r3
 800230a:	d83c      	bhi.n	8002386 <LL_TIM_OC_Init+0xa2>
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	429a      	cmp	r2, r3
 8002314:	d021      	beq.n	800235a <LL_TIM_OC_Init+0x76>
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	429a      	cmp	r2, r3
 800231e:	d832      	bhi.n	8002386 <LL_TIM_OC_Init+0xa2>
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d003      	beq.n	800232e <LL_TIM_OC_Init+0x4a>
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b10      	cmp	r3, #16
 800232a:	d00b      	beq.n	8002344 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800232c:	e02b      	b.n	8002386 <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800232e:	2317      	movs	r3, #23
 8002330:	18fc      	adds	r4, r7, r3
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	0011      	movs	r1, r2
 8002338:	0018      	movs	r0, r3
 800233a:	f000 f82c 	bl	8002396 <OC1Config>
 800233e:	0003      	movs	r3, r0
 8002340:	7023      	strb	r3, [r4, #0]
      break;
 8002342:	e021      	b.n	8002388 <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002344:	2317      	movs	r3, #23
 8002346:	18fc      	adds	r4, r7, r3
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	0011      	movs	r1, r2
 800234e:	0018      	movs	r0, r3
 8002350:	f000 f868 	bl	8002424 <OC2Config>
 8002354:	0003      	movs	r3, r0
 8002356:	7023      	strb	r3, [r4, #0]
      break;
 8002358:	e016      	b.n	8002388 <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800235a:	2317      	movs	r3, #23
 800235c:	18fc      	adds	r4, r7, r3
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	0011      	movs	r1, r2
 8002364:	0018      	movs	r0, r3
 8002366:	f000 f8a9 	bl	80024bc <OC3Config>
 800236a:	0003      	movs	r3, r0
 800236c:	7023      	strb	r3, [r4, #0]
      break;
 800236e:	e00b      	b.n	8002388 <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002370:	2317      	movs	r3, #23
 8002372:	18fc      	adds	r4, r7, r3
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	0011      	movs	r1, r2
 800237a:	0018      	movs	r0, r3
 800237c:	f000 f8e8 	bl	8002550 <OC4Config>
 8002380:	0003      	movs	r3, r0
 8002382:	7023      	strb	r3, [r4, #0]
      break;
 8002384:	e000      	b.n	8002388 <LL_TIM_OC_Init+0xa4>
      break;
 8002386:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8002388:	2317      	movs	r3, #23
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	781b      	ldrb	r3, [r3, #0]
}
 800238e:	0018      	movs	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	b007      	add	sp, #28
 8002394:	bd90      	pop	{r4, r7, pc}

08002396 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	2201      	movs	r2, #1
 80023a6:	4393      	bics	r3, r2
 80023a8:	001a      	movs	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2203      	movs	r2, #3
 80023c4:	4393      	bics	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2270      	movs	r2, #112	; 0x70
 80023cc:	4393      	bics	r3, r2
 80023ce:	001a      	movs	r2, r3
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2202      	movs	r2, #2
 80023dc:	4393      	bics	r3, r2
 80023de:	001a      	movs	r2, r3
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2201      	movs	r2, #1
 80023ec:	4393      	bics	r3, r2
 80023ee:	001a      	movs	r2, r3
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	0011      	movs	r1, r2
 800240c:	0018      	movs	r0, r3
 800240e:	f7ff fee3 	bl	80021d8 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002418:	2300      	movs	r3, #0
}
 800241a:	0018      	movs	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	b006      	add	sp, #24
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	2210      	movs	r2, #16
 8002434:	4393      	bics	r3, r2
 8002436:	001a      	movs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4a18      	ldr	r2, [pc, #96]	; (80024b4 <OC2Config+0x90>)
 8002452:	4013      	ands	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <OC2Config+0x94>)
 800245a:	401a      	ands	r2, r3
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	021b      	lsls	r3, r3, #8
 8002462:	4313      	orrs	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2220      	movs	r2, #32
 800246a:	4393      	bics	r3, r2
 800246c:	001a      	movs	r2, r3
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	4313      	orrs	r3, r2
 8002476:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2210      	movs	r2, #16
 800247c:	4393      	bics	r3, r2
 800247e:	001a      	movs	r2, r3
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	4313      	orrs	r3, r2
 8002488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	0011      	movs	r1, r2
 800249e:	0018      	movs	r0, r3
 80024a0:	f7ff fea6 	bl	80021f0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	0018      	movs	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b006      	add	sp, #24
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	fffffcff 	.word	0xfffffcff
 80024b8:	ffff8fff 	.word	0xffff8fff

080024bc <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4a1f      	ldr	r2, [pc, #124]	; (8002548 <OC3Config+0x8c>)
 80024cc:	401a      	ands	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2203      	movs	r2, #3
 80024e8:	4393      	bics	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2270      	movs	r2, #112	; 0x70
 80024f0:	4393      	bics	r3, r2
 80024f2:	001a      	movs	r2, r3
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	4a13      	ldr	r2, [pc, #76]	; (800254c <OC3Config+0x90>)
 8002500:	401a      	ands	r2, r3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	021b      	lsls	r3, r3, #8
 8002508:	4313      	orrs	r3, r2
 800250a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	4a0e      	ldr	r2, [pc, #56]	; (8002548 <OC3Config+0x8c>)
 8002510:	401a      	ands	r2, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	021b      	lsls	r3, r3, #8
 8002518:	4313      	orrs	r3, r2
 800251a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	0011      	movs	r1, r2
 8002530:	0018      	movs	r0, r3
 8002532:	f7ff fe69 	bl	8002208 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800253c:	2300      	movs	r3, #0
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b006      	add	sp, #24
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	fffffeff 	.word	0xfffffeff
 800254c:	fffffdff 	.word	0xfffffdff

08002550 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a1f      	ldr	r2, [pc, #124]	; (80025dc <OC4Config+0x8c>)
 8002560:	401a      	ands	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4a19      	ldr	r2, [pc, #100]	; (80025e0 <OC4Config+0x90>)
 800257c:	4013      	ands	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4a18      	ldr	r2, [pc, #96]	; (80025e4 <OC4Config+0x94>)
 8002584:	401a      	ands	r2, r3
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	021b      	lsls	r3, r3, #8
 800258c:	4313      	orrs	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	4a15      	ldr	r2, [pc, #84]	; (80025e8 <OC4Config+0x98>)
 8002594:	401a      	ands	r2, r3
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	031b      	lsls	r3, r3, #12
 800259c:	4313      	orrs	r3, r2
 800259e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	4a0e      	ldr	r2, [pc, #56]	; (80025dc <OC4Config+0x8c>)
 80025a4:	401a      	ands	r2, r3
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	031b      	lsls	r3, r3, #12
 80025ac:	4313      	orrs	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	0011      	movs	r1, r2
 80025c4:	0018      	movs	r0, r3
 80025c6:	f7ff fe2b 	bl	8002220 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	0018      	movs	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b006      	add	sp, #24
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	ffffefff 	.word	0xffffefff
 80025e0:	fffffcff 	.word	0xfffffcff
 80025e4:	ffff8fff 	.word	0xffff8fff
 80025e8:	ffffdfff 	.word	0xffffdfff

080025ec <LL_USART_IsEnabled>:
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2201      	movs	r2, #1
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <LL_USART_IsEnabled+0x18>
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <LL_USART_IsEnabled+0x1a>
 8002604:	2300      	movs	r3, #0
}
 8002606:	0018      	movs	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	b002      	add	sp, #8
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <LL_USART_SetStopBitsLength>:
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	4a05      	ldr	r2, [pc, #20]	; (8002634 <LL_USART_SetStopBitsLength+0x24>)
 8002620:	401a      	ands	r2, r3
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	605a      	str	r2, [r3, #4]
}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	46bd      	mov	sp, r7
 800262e:	b002      	add	sp, #8
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	ffffcfff 	.word	0xffffcfff

08002638 <LL_USART_SetHWFlowCtrl>:
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	4a05      	ldr	r2, [pc, #20]	; (800265c <LL_USART_SetHWFlowCtrl+0x24>)
 8002648:	401a      	ands	r2, r3
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	609a      	str	r2, [r3, #8]
}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	46bd      	mov	sp, r7
 8002656:	b002      	add	sp, #8
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	fffffcff 	.word	0xfffffcff

08002660 <LL_USART_SetBaudRate>:
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	021b      	lsls	r3, r3, #8
 8002674:	429a      	cmp	r2, r3
 8002676:	d11c      	bne.n	80026b2 <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	005a      	lsls	r2, r3, #1
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	085b      	lsrs	r3, r3, #1
 8002680:	18d3      	adds	r3, r2, r3
 8002682:	6839      	ldr	r1, [r7, #0]
 8002684:	0018      	movs	r0, r3
 8002686:	f7fd fd3f 	bl	8000108 <__udivsi3>
 800268a:	0003      	movs	r3, r0
 800268c:	b29b      	uxth	r3, r3
 800268e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	4a10      	ldr	r2, [pc, #64]	; (80026d4 <LL_USART_SetBaudRate+0x74>)
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	085b      	lsrs	r3, r3, #1
 800269c:	b29b      	uxth	r3, r3
 800269e:	001a      	movs	r2, r3
 80026a0:	2307      	movs	r3, #7
 80026a2:	4013      	ands	r3, r2
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	60da      	str	r2, [r3, #12]
}
 80026b0:	e00c      	b.n	80026cc <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	085a      	lsrs	r2, r3, #1
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	18d3      	adds	r3, r2, r3
 80026ba:	6839      	ldr	r1, [r7, #0]
 80026bc:	0018      	movs	r0, r3
 80026be:	f7fd fd23 	bl	8000108 <__udivsi3>
 80026c2:	0003      	movs	r3, r0
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	001a      	movs	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	60da      	str	r2, [r3, #12]
}
 80026cc:	46c0      	nop			; (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b006      	add	sp, #24
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	0000fff0 	.word	0x0000fff0

080026d8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80026e2:	230f      	movs	r3, #15
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	2201      	movs	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	0018      	movs	r0, r3
 80026f2:	f7ff ff7b 	bl	80025ec <LL_USART_IsEnabled>
 80026f6:	1e03      	subs	r3, r0, #0
 80026f8:	d13b      	bne.n	8002772 <LL_USART_Init+0x9a>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a20      	ldr	r2, [pc, #128]	; (8002780 <LL_USART_Init+0xa8>)
 8002700:	401a      	ands	r2, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6859      	ldr	r1, [r3, #4]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	4319      	orrs	r1, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	4319      	orrs	r1, r3
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	430b      	orrs	r3, r1
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	0011      	movs	r1, r2
 8002726:	0018      	movs	r0, r3
 8002728:	f7ff ff72 	bl	8002610 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	0011      	movs	r1, r2
 8002734:	0018      	movs	r0, r3
 8002736:	f7ff ff7f 	bl	8002638 <LL_USART_SetHWFlowCtrl>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
#else
    if (USARTx == USART2)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a11      	ldr	r2, [pc, #68]	; (8002784 <LL_USART_Init+0xac>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d104      	bne.n	800274c <LL_USART_Init+0x74>
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002742:	200c      	movs	r0, #12
 8002744:	f7ff fbbc 	bl	8001ec0 <LL_RCC_GetUSARTClockFreq>
 8002748:	0003      	movs	r3, r0
 800274a:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00f      	beq.n	8002772 <LL_USART_Init+0x9a>
        && (USART_InitStruct->BaudRate != 0U))
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <LL_USART_Init+0x9a>
    {
      status = SUCCESS;
 800275a:	230f      	movs	r3, #15
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	699a      	ldr	r2, [r3, #24]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68b9      	ldr	r1, [r7, #8]
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff ff77 	bl	8002660 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002772:	230f      	movs	r3, #15
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	781b      	ldrb	r3, [r3, #0]
}
 8002778:	0018      	movs	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	b004      	add	sp, #16
 800277e:	bd80      	pop	{r7, pc}
 8002780:	efff69f3 	.word	0xefff69f3
 8002784:	40004400 	.word	0x40004400

08002788 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002790:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <LL_mDelay+0x40>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002796:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3301      	adds	r3, #1
 800279c:	d00c      	beq.n	80027b8 <LL_mDelay+0x30>
  {
    Delay++;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3301      	adds	r3, #1
 80027a2:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80027a4:	e008      	b.n	80027b8 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80027a6:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <LL_mDelay+0x40>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	2380      	movs	r3, #128	; 0x80
 80027ac:	025b      	lsls	r3, r3, #9
 80027ae:	4013      	ands	r3, r2
 80027b0:	d002      	beq.n	80027b8 <LL_mDelay+0x30>
    {
      Delay--;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3b01      	subs	r3, #1
 80027b6:	607b      	str	r3, [r7, #4]
  while (Delay)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f3      	bne.n	80027a6 <LL_mDelay+0x1e>
    }
  }
}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	46c0      	nop			; (mov r8, r8)
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b004      	add	sp, #16
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	e000e010 	.word	0xe000e010

080027cc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80027d4:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <LL_SetSystemCoreClock+0x18>)
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	601a      	str	r2, [r3, #0]
}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	46bd      	mov	sp, r7
 80027de:	b002      	add	sp, #8
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	20000004 	.word	0x20000004

080027e8 <__libc_init_array>:
 80027e8:	b570      	push	{r4, r5, r6, lr}
 80027ea:	2600      	movs	r6, #0
 80027ec:	4d0c      	ldr	r5, [pc, #48]	; (8002820 <__libc_init_array+0x38>)
 80027ee:	4c0d      	ldr	r4, [pc, #52]	; (8002824 <__libc_init_array+0x3c>)
 80027f0:	1b64      	subs	r4, r4, r5
 80027f2:	10a4      	asrs	r4, r4, #2
 80027f4:	42a6      	cmp	r6, r4
 80027f6:	d109      	bne.n	800280c <__libc_init_array+0x24>
 80027f8:	2600      	movs	r6, #0
 80027fa:	f000 f821 	bl	8002840 <_init>
 80027fe:	4d0a      	ldr	r5, [pc, #40]	; (8002828 <__libc_init_array+0x40>)
 8002800:	4c0a      	ldr	r4, [pc, #40]	; (800282c <__libc_init_array+0x44>)
 8002802:	1b64      	subs	r4, r4, r5
 8002804:	10a4      	asrs	r4, r4, #2
 8002806:	42a6      	cmp	r6, r4
 8002808:	d105      	bne.n	8002816 <__libc_init_array+0x2e>
 800280a:	bd70      	pop	{r4, r5, r6, pc}
 800280c:	00b3      	lsls	r3, r6, #2
 800280e:	58eb      	ldr	r3, [r5, r3]
 8002810:	4798      	blx	r3
 8002812:	3601      	adds	r6, #1
 8002814:	e7ee      	b.n	80027f4 <__libc_init_array+0xc>
 8002816:	00b3      	lsls	r3, r6, #2
 8002818:	58eb      	ldr	r3, [r5, r3]
 800281a:	4798      	blx	r3
 800281c:	3601      	adds	r6, #1
 800281e:	e7f2      	b.n	8002806 <__libc_init_array+0x1e>
 8002820:	0800288c 	.word	0x0800288c
 8002824:	0800288c 	.word	0x0800288c
 8002828:	0800288c 	.word	0x0800288c
 800282c:	08002890 	.word	0x08002890

08002830 <memset>:
 8002830:	0003      	movs	r3, r0
 8002832:	1882      	adds	r2, r0, r2
 8002834:	4293      	cmp	r3, r2
 8002836:	d100      	bne.n	800283a <memset+0xa>
 8002838:	4770      	bx	lr
 800283a:	7019      	strb	r1, [r3, #0]
 800283c:	3301      	adds	r3, #1
 800283e:	e7f9      	b.n	8002834 <memset+0x4>

08002840 <_init>:
 8002840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002846:	bc08      	pop	{r3}
 8002848:	469e      	mov	lr, r3
 800284a:	4770      	bx	lr

0800284c <_fini>:
 800284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002852:	bc08      	pop	{r3}
 8002854:	469e      	mov	lr, r3
 8002856:	4770      	bx	lr
